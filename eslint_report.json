[{"filePath":"/Users/ahmad/Downloads/APP/src/App.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":32,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"./App.css\";\nimport {\n  createBrowserRouter,\n  createRoutesFromElements,\n  Route,\n  RouterProvider,\n  Navigate,\n} from \"react-router-dom\";\nimport Layout from \"./components/Layout\";\nimport Home from \"./pages/Home\";\nimport Cart from \"./pages/Cart\";\nimport Login from \"./pages/Login\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport Checkout from \"./pages/Checkout\";\nimport AuthProvider, { useAuth } from \"./firebase/Auth\";\nimport Register from \"./pages/Register\";\nimport ProductDetail from \"./pages/ProductDetail\";\nimport AdminPage from \"./pages/AdminPage\";\nimport CustomerOrders from \"./pages/Orders\";\nimport CategoryPage from \"./pages/CategoryPage\";\nimport ForgotPassword from \"./pages/ForgotPassword\";\nimport { AdminRoute } from './firebase/AdminRoute';\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\n// Regular ProtectedRoute for non-admin protected pages\nfunction ProtectedRoute({ children }) {\n  const { user, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (!user || !user.emailVerified) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  return children;\n}\n\nconst router = createBrowserRouter(\n  createRoutesFromElements(\n    <Route element={<Layout />}>\n      {/* Public routes */}\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/cart\" element={<Cart />} />\n      <Route path=\"/product/:productId\" element={<ProductDetail />} />\n      <Route path=\"/category/:categoryId\" element={<CategoryPage />} />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/register\" element={<Register />} />\n      <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n\n      {/* Protected user routes */}\n      <Route\n        path=\"/checkout\"\n        element={\n          <ProtectedRoute>\n            <Checkout />\n          </ProtectedRoute>\n        }\n      />\n      <Route\n        path=\"/orders\"\n        element={\n          <ProtectedRoute>\n            <CustomerOrders />\n          </ProtectedRoute>\n        }\n      />\n\n      {/* Protected admin routes */}\n      <Route\n        path=\"/admin/*\"\n        element={\n          <AdminRoute>\n            <AdminPage />\n          </AdminRoute>\n        }\n      />\n\n      {/* Catch-all route */}\n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n    </Route>\n  )\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthProvider>\n        <RouterProvider router={router} />\n      </AuthProvider>\n    </Provider>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/components/AddressForm.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":38,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateAddress } from \"../feature/checkout-slice\";\n\nexport default function AddressForm({ onValidityChange }) {\n  const address = useSelector((state) => state.checkout?.address);\n  const dispatch = useDispatch();\n\n  const requiredFields = [\n    'firstName',\n    'lastName',\n    'address1',\n    'city',\n    'country',\n    'phoneNumber'\n  ];\n\n  function handleChange(event) {\n    const { name, value } = event.target ?? {};\n    dispatch(updateAddress({ [name]: value }));\n    \n    // Check if all required fields are filled\n    const isValid = requiredFields.every(field => {\n      if (field === name) {\n        return value.trim() !== '';\n      }\n      return address[field]?.trim() !== '';\n    });\n    \n    onValidityChange(isValid);\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Shipping Address\n      </Typography>\n      <Box component=\"form\" onChange={handleChange}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"firstName\"\n              name=\"firstName\"\n              label=\"First Name\"\n              fullWidth\n              autoComplete=\"given-name\"\n              variant=\"standard\"\n              defaultValue={address.firstName ?? \"\"}\n              error={address.firstName === \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"lastName\"\n              name=\"lastName\"\n              label=\"Last Name\"\n              fullWidth\n              autoComplete=\"family-name\"\n              variant=\"standard\"\n              defaultValue={address.lastName ?? \"\"}\n              error={address.lastName === \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              required\n              id=\"address1\"\n              name=\"address1\"\n              label=\"Address Line 1\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.address1 ?? \"\"}\n              error={address.address1 === \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"address2\"\n              name=\"address2\"\n              label=\"Address Line 2\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.address2 ?? \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              required\n              id=\"city\"\n              name=\"city\"\n              label=\"City\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.city ?? \"\"}\n              error={address.city === \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"zipCode\"\n              name=\"zipCode\"\n              label=\"Zip Code/Postal Code\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.zipCode ?? \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              required\n              id=\"country\"\n              name=\"country\"\n              label=\"Country\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.country ?? \"\"}\n              error={address.country === \"\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              required\n              id=\"phoneNumber\"\n              name=\"phoneNumber\"\n              label=\"Phone Number\"\n              fullWidth\n              variant=\"standard\"\n              defaultValue={address.phoneNumber ?? \"\"}\n              error={address.phoneNumber === \"\"}\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/components/Header.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":221,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  fetchAllCategories,\n  selectAllCategories,\n  selectCategoriesLoading,\n  selectCategoriesError,\n  setSelectedCategory,\n  selectSelectedCategory,\n} from \"../feature/categories-slice\";\nimport { selectAllProducts } from \"../feature/products-slice\";\nimport { getItemCount } from \"../utils\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  TextField,\n  Select,\n  MenuItem,\n  IconButton,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Box,\n  useTheme,\n  useMediaQuery,\n  Menu,\n  Badge,\n  CircularProgress,\n} from \"@mui/material\";\nimport {\n  ShoppingCart,\n  Search,\n  Menu as MenuIcon,\n  Close,\n  Person,\n  Receipt,\n  KeyboardArrowDown,\n} from \"@mui/icons-material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { styled } from \"@mui/system\";\n\n// Styled Components\nconst HeaderContainer = styled(AppBar)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  boxShadow: theme.shadows[1],\n}));\n\nconst Logo = styled(Typography)(({ theme }) => ({\n  color: theme.palette.primary.main,\n  fontWeight: 700,\n  textDecoration: \"none\",\n  marginRight: theme.spacing(2),\n  cursor: \"pointer\",\n  \"&:hover\": {\n    color: theme.palette.primary.dark,\n  },\n}));\n\nconst NavContainer = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  width: \"100%\",\n  justifyContent: \"space-between\",\n  gap: theme.spacing(2),\n}));\n\nconst SearchContainer = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  flex: 1,\n  maxWidth: 800,\n  margin: \"0 auto\",\n  gap: theme.spacing(1),\n}));\n\nconst CategorySelect = styled(Select)(({ theme }) => ({\n  minWidth: 200,\n  backgroundColor: theme.palette.background.paper,\n  \"& .MuiSelect-select\": {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n}));\n\nconst ActionButtons = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: theme.spacing(2),\n  marginLeft: \"auto\",\n}));\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n  },\n}));\n\nconst ProfileButton = styled(Button)(({ theme }) => ({\n  textTransform: \"none\",\n  color: theme.palette.text.primary,\n  minWidth: 130,\n  justifyContent: \"flex-start\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.action.hover,\n  },\n}));\n\nconst DrawerContent = styled(Box)(({ theme }) => ({\n  width: 280,\n  padding: theme.spacing(2),\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n}));\n\nconst MobileSearchContainer = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nconst Header = ({ user, signOut }) => {\n  // State\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [profileAnchorEl, setProfileAnchorEl] = useState(null);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  // Hooks\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n\n  // Redux Selectors\n  const categories = useSelector(selectAllCategories);\n  const categoriesLoading = useSelector(selectCategoriesLoading);\n  const categoriesError = useSelector(selectCategoriesError);\n  const selectedCategory = useSelector(selectSelectedCategory);\n  const products = useSelector(selectAllProducts); // Updated selector\n  const cartItems = useSelector((state) => state.cart?.value || []); // Updated cart selector path\n  const cartItemCount = getItemCount(cartItems);\n\n  // Debugging\n  console.log(\"Cart Items:\", cartItems);\n  console.log(\"Cart Item Count:\", cartItemCount);\n\n  // Effects\n  useEffect(() => {\n    dispatch(fetchAllCategories());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const category = searchParams.get(\"category\");\n    const searchTerm = searchParams.get(\"searchTerm\");\n\n    if (category) {\n      dispatch(setSelectedCategory(category));\n    }\n\n    setSearchValue(searchTerm || \"\");\n  }, [searchParams, dispatch]);\n\n  // Handlers\n  const handleCategoryChange = (event) => {\n    const categoryId = event.target.value;\n    dispatch(setSelectedCategory(categoryId));\n\n    if (categoryId === \"all\") {\n      navigate(\"/\");\n    } else {\n      navigate(`/category/${categoryId}`);\n    }\n  };\n\n  const handleSearch = (value) => {\n    const searchQuery = new URLSearchParams();\n    if (selectedCategory && selectedCategory !== \"all\") {\n      searchQuery.set(\"category\", selectedCategory);\n    }\n    if (value) {\n      searchQuery.set(\"searchTerm\", value.toLowerCase());\n    }\n    navigate(`/?${searchQuery.toString()}`);\n\n    // Scroll to products section with a slight delay to ensure DOM update\n    setTimeout(() => {\n      const productsSection = document.getElementById(\"products\");\n      if (productsSection) {\n        productsSection.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }, 100);\n  };\n\n  const handleProfileClick = (event) => {\n    setProfileAnchorEl(event.currentTarget);\n  };\n\n  const handleProfileClose = () => {\n    setProfileAnchorEl(null);\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n    handleProfileClose();\n    navigate(\"/login\");\n  };\n\n  const handleMyOrders = () => {\n    handleProfileClose();\n    navigate(\"/orders\");\n  };\n\n  // Render Functions\n  const renderSearch = () => (\n    <SearchContainer>\n      <CategorySelect\n        value={selectedCategory || \"all\"}\n        onChange={handleCategoryChange}\n        size=\"small\"\n        displayEmpty\n        disabled={categoriesLoading}\n        MenuProps={{\n          PaperProps: {\n            style: {\n              maxHeight: 400,\n            },\n          },\n        }}\n      >\n        <MenuItem value=\"all\">All Categories</MenuItem>\n        {categories.map((category) => (\n          <MenuItem\n            key={category.id}\n            value={category.id}\n            sx={{\n              textTransform: \"capitalize\",\n              minHeight: \"48px\",\n            }}\n          >\n            {category.name} ({category.productCount})\n          </MenuItem>\n        ))}\n      </CategorySelect>\n\n      {categoriesLoading ? (\n        <CircularProgress size={24} />\n      ) : (\n        <Autocomplete\n          freeSolo\n          size=\"small\"\n          options={products.map((product) => product.name)}\n          value={searchValue}\n          onChange={(_, newValue) => {\n            setSearchValue(newValue);\n            handleSearch(newValue);\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              placeholder=\"Search products...\"\n              fullWidth\n              size=\"small\"\n              error={Boolean(categoriesError)}\n              helperText={categoriesError}\n            />\n          )}\n          sx={{ flex: 1 }}\n        />\n      )}\n\n      <IconButton\n        color=\"primary\"\n        onClick={() => handleSearch(searchValue)}\n        disabled={categoriesLoading}\n      >\n        <Search />\n      </IconButton>\n    </SearchContainer>\n  );\n\n  const renderProfileMenu = () => (\n    <Menu\n      anchorEl={profileAnchorEl}\n      open={Boolean(profileAnchorEl)}\n      onClose={handleProfileClose}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"right\",\n      }}\n    >\n      <MenuItem onClick={handleMyOrders}>\n        <ListItemIcon>\n          <Receipt fontSize=\"small\" />\n        </ListItemIcon>\n        <ListItemText primary=\"My Orders\" />\n      </MenuItem>\n      <MenuItem onClick={handleLogout}>\n        <ListItemIcon>\n          <Close fontSize=\"small\" />\n        </ListItemIcon>\n        <ListItemText primary=\"Logout\" />\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <HeaderContainer position=\"sticky\">\n      <Toolbar>\n        <NavContainer>\n          <Logo variant=\"h6\" component={Link} to=\"/\">\n            Lumi\n          </Logo>\n\n          {!isMobile && renderSearch()}\n\n          {!isMobile && (\n            <ActionButtons>\n              <IconButton\n                component={Link}\n                to=\"/cart\"\n                color=\"inherit\"\n                sx={{\n                  \"&:hover\": {\n                    backgroundColor: \"action.hover\",\n                  },\n                }}\n              >\n                <StyledBadge badgeContent={cartItemCount} color=\"primary\">\n                  <ShoppingCart />\n                </StyledBadge>\n              </IconButton>\n\n              {user ? (\n                <>\n                  <ProfileButton\n                    onClick={handleProfileClick}\n                    endIcon={<KeyboardArrowDown />}\n                  >\n                    <Person sx={{ mr: 1 }} />\n                    {user.displayName || user.email}\n                  </ProfileButton>\n                  {renderProfileMenu()}\n                </>\n              ) : (\n                <Button\n                  component={Link}\n                  to=\"/login\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                >\n                  Login\n                </Button>\n              )}\n            </ActionButtons>\n          )}\n\n          {isMobile && (\n            <IconButton\n              edge=\"end\"\n              color=\"inherit\"\n              onClick={() => setIsDrawerOpen(true)}\n            >\n              <MenuIcon />\n            </IconButton>\n          )}\n        </NavContainer>\n\n        <Drawer\n          anchor=\"right\"\n          open={isDrawerOpen}\n          onClose={() => setIsDrawerOpen(false)}\n        >\n          <DrawerContent>\n            <MobileSearchContainer>{renderSearch()}</MobileSearchContainer>\n\n            <List>\n              <ListItem\n                button\n                component={Link}\n                to=\"/cart\"\n                onClick={() => setIsDrawerOpen(false)}\n              >\n                <ListItemIcon>\n                  <ShoppingCart />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Cart\"\n                  secondary={`${cartItemCount} items`}\n                />\n              </ListItem>\n\n              {user ? (\n                <>\n                  <ListItem button onClick={handleMyOrders}>\n                    <ListItemIcon>\n                      <Receipt />\n                    </ListItemIcon>\n                    <ListItemText primary=\"My Orders\" />\n                  </ListItem>\n                  <ListItem button onClick={handleLogout}>\n                    <ListItemIcon>\n                      <Close />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Logout\" />\n                  </ListItem>\n                </>\n              ) : (\n                <ListItem\n                  button\n                  component={Link}\n                  to=\"/login\"\n                  onClick={() => setIsDrawerOpen(false)}\n                >\n                  <ListItemIcon>\n                    <Person />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Login\" />\n                </ListItem>\n              )}\n            </List>\n          </DrawerContent>\n        </Drawer>\n      </Toolbar>\n    </HeaderContainer>\n  );\n};\n\nexport default Header;","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/components/Layout.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":42,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material\";\nimport { CssBaseline } from \"@mui/material\";\nimport Header from \"./Header\";\nimport { Outlet, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"../firebase/Auth\"; // Make sure this path is correct\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n    primary: {\n      main: \"#f5f5dc\", // Beige\n    },\n    secondary: {\n      main: \"#d2b48c\", // Tan (complementary to beige)\n    },\n    background: {\n      default: \"#1c1c1d\", // Dark background\n      paper: \"#2c2c2d\", // Slightly lighter dark background for paper elements\n    },\n    text: {\n      primary: \"#ffffff\", // White text\n      secondary: \"#c0c0c0\", // Light Gray text\n    },\n  },\n  typography: {\n    fontFamily: \"'Quicksand', Arial, sans-serif\",\n  },\n  shape: {\n    borderRadius: 8,\n  },\n});\n\nexport default function Layout() {\n  const { user, signOut } = useAuth();\n  const location = useLocation();\n\n  const isAuthPage =\n    location.pathname === \"/login\" || location.pathname === \"/register\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {!isAuthPage && <Header user={user} signOut={signOut} />}\n      <main>\n        <Outlet />\n      </main>\n      {!isAuthPage && <footer></footer>}\n    </ThemeProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/components/ReviewForm.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":34,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Grid from \"@mui/material/Grid\";\nimport { useSelector } from \"react-redux\";\n\nexport default function ReviewForm() {\n  const cart = useSelector((state) => state.cart.value);\n  const address = useSelector((state) => state.checkout?.address);\n  const promocodeDiscount = useSelector((state) => state.cart?.promocodeDiscount) || 0;\n  const shippingCost = 300;\n\n  // Calculate totals\n  const subtotal = cart.reduce(\n    (sum, item) => sum + item.product.price * item.quantity,\n    0\n  );\n  const discountAmount = (subtotal * (promocodeDiscount / 100));\n  const totalWithDiscount = subtotal - discountAmount + shippingCost;\n\n  const addressFields = [\n    `${address.firstName} ${address.lastName}`,\n    address.address1,\n    address.address2,\n    address.city,\n    address.zipCode,\n    address.country,\n    address.phoneNumber,\n  ].filter(Boolean);\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Order Summary\n      </Typography>\n      <List disablePadding>\n        {cart.map(({ product, quantity, color, size }) => (\n          <ListItem key={product.id + (size || \"\") + (color || \"\")} sx={{ py: 1, px: 0 }}>\n            <ListItemText\n              primary={product.name}\n              secondary={`Color: ${color || 'N/A'} | Size: ${size || 'N/A'}`}\n            />\n            <Typography variant=\"body2\">\n              {quantity} x PKR {product.price.toFixed(2)} = PKR {(quantity * product.price).toFixed(2)}\n            </Typography>\n          </ListItem>\n        ))}\n\n        <ListItem sx={{ py: 1, px: 0 }}>\n          <ListItemText primary=\"Subtotal\" />\n          <Typography variant=\"body1\">\n            PKR {subtotal.toFixed(2)}\n          </Typography>\n        </ListItem>\n\n        {promocodeDiscount > 0 && (\n          <ListItem sx={{ py: 1, px: 0 }}>\n            <ListItemText primary={`Discount (${promocodeDiscount}%)`} />\n            <Typography variant=\"body1\" color=\"error\">\n              - PKR {discountAmount.toFixed(2)}\n            </Typography>\n          </ListItem>\n        )}\n\n        <ListItem sx={{ py: 1, px: 0 }}>\n          <ListItemText primary=\"Shipping Cost\" />\n          <Typography variant=\"body1\">\n            PKR {shippingCost.toFixed(2)}\n          </Typography>\n        </ListItem>\n\n        <ListItem sx={{ py: 1, px: 0 }}>\n          <ListItemText primary=\"Total\" />\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 700 }}>\n            PKR {totalWithDiscount.toFixed(2)}\n          </Typography>\n        </ListItem>\n      </List>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\n            Shipping Address\n          </Typography>\n          <Typography gutterBottom>{addressFields.join(', ')}</Typography>\n        </Grid>\n      </Grid>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/feature/cart-slice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/feature/categories-slice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/feature/checkout-slice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/feature/orderService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/feature/products-slice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/firebase/AdminRoute.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":12,"column":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from './Auth';\nimport CircularProgress from \"@mui/material/CircularProgress\"; // Import CircularProgress\n\n\nexport const AdminRoute = ({ children }) => {\n  const { user, userRole, loading } = useAuth();\n  const location = useLocation();\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (!user || userRole !== \"admin\") {\n    // Redirect them to the login page, but save the current location they were\n    // trying to go to when they were redirected\n    \n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/firebase/Auth.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":39,"column":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  createUserWithEmailAndPassword,\n  getAuth,\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  sendEmailVerification,\n} from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { useContext, useEffect, useState, createContext } from \"react\";\nimport { sendPasswordResetEmail } from \"firebase/auth\";\nimport { useSelector } from 'react-redux';\n\n\n// Your existing Firebase config remains the same\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDlHQYH7qv81iO-04pFOP47Efe8kms5NAs\",\n  authDomain: \"testingestore-5a878.firebaseapp.com\",\n  projectId: \"testingestore-5a878\",\n  storageBucket: \"testingestore-5a878.appspot.com\",\n  messagingSenderId: \"866805788601\",\n  appId: \"1:866805788601:web:4864c99285d15028d59068\",\n  measurementId: \"G-2PC7TLW2GJ\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nconst AuthContext = createContext(null);\n\nconst AuthProvider = ({ children }) => {\n  const auth = useProvideAuth();\n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\nexport { db };\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [verificationEmailSent, setVerificationEmailSent] = useState(false);\n  const currentCart = useSelector(state => state.cart.value);\n  const [userRole, setUserRole] = useState(null);\n\n  const checkUserRole = async (uid) => {\n    try {\n      const roleDoc = await getDoc(doc(db, \"roles\", uid));\n      return roleDoc.exists() ? roleDoc.data().role : \"user\";\n    } catch (error) {\n      console.error(\"Error checking user role:\", error);\n      return \"user\";\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n      setError(null);\n      return true;\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n      throw error;\n    }\n  };\n\n  const getErrorMessage = (errorCode) => {\n    switch (errorCode) {\n      case \"auth/email-already-in-use\":\n        return \"The email address is already in use by another account.\";\n      case \"auth/invalid-email\":\n        return \"The email address is not valid.\";\n      case \"auth/operation-not-allowed\":\n        return \"Email/password accounts are not enabled.\";\n      case \"auth/weak-password\":\n        return \"The password is too weak.\";\n      case \"auth/user-disabled\":\n        return \"The user account has been disabled.\";\n      case \"auth/user-not-found\":\n        return \"There is no user record corresponding to this identifier.\";\n      case \"auth/wrong-password\":\n        return \"The password is invalid.\";\n      default:\n        return \"An error occurred. Please try again.\";\n    }\n  };\n\n  const signUp = async (email, password, displayName) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      const { user } = userCredential;\n\n      // Update the user's profile\n      await updateProfile(user, { displayName });\n\n      // Send verification email\n      await sendEmailVerification(user);\n      setVerificationEmailSent(true);\n\n      // Add user data to Firestore\n      await setDoc(doc(db, \"users\", user.uid), {\n        displayName,\n        email,\n        cart: currentCart,\n        emailVerified: false,\n      });\n\n      setUser(user);\n      setError(null);\n      return user;\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n      throw error;\n    }\n  };\n\n  const signIn = async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      const { user } = userCredential;\n      \n      if (!user.emailVerified) {\n        throw new Error(\"Please verify your email before signing in.\");\n      }\n      const role = await checkUserRole(user.uid);\n      // Update the user's cart in Firestore with current cart state\n      await setDoc(doc(db, \"users\", user.uid), {\n        cart: currentCart,\n        role: role // Store role in user document\n      }, { merge: true });\n\n      const userData = await getUserData(user.uid);\n      setUser({ ...user, ...userData, role });\n      setUserRole(role);\n      setError(null);\n      return { ...user, role };\n    } catch (error) {\n      if (error.message === \"Please verify your email before signing in.\") {\n        setError(error.message);\n      } else {\n        setError(getErrorMessage(error.code));\n      }\n      throw error;\n    }\n  };\n\n  const resendVerificationEmail = async () => {\n    if (user && !user.emailVerified) {\n      try {\n        await sendEmailVerification(user);\n        setVerificationEmailSent(true);\n        return true;\n      } catch (error) {\n        setError(getErrorMessage(error.code));\n        throw error;\n      }\n    }\n    return false;\n  };\n\n  const signOutUser = async () => {\n    try {\n      await signOut(auth);\n      setUser(null);\n      setError(null);\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n      throw error;\n    }\n  };\n\n  const getUserData = async (uid) => {\n    try {\n      const userDoc = await getDoc(doc(db, \"users\", uid));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      } else {\n        throw new Error(\"User document does not exist\");\n      }\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n      throw error;\n    }\n  };\n\n  const updateUserData = async (uid, data) => {\n    try {\n      await setDoc(doc(db, \"users\", uid), data, { merge: true });\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n      throw error;\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        try {\n          const userData = await getUserData(firebaseUser.uid);\n          setUser({ ...firebaseUser, ...userData });\n          \n          // Update email verification status in Firestore\n          if (firebaseUser.emailVerified) {\n            await updateUserData(firebaseUser.uid, {\n              emailVerified: true,\n            });\n          }\n        } catch (error) {\n          console.error(\"Error fetching user data:\", error);\n          setUser(firebaseUser);\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    error,\n    loading,\n    verificationEmailSent,\n    signIn,\n    signUp,\n    signOut: signOutUser,\n    getUserData,\n    updateUserData,\n    resendVerificationEmail,\n    resetPassword,\n    checkUserRole,\n    userRole,\n  };\n}\n\nexport default AuthProvider;","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/main.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":12,"column":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/AdminPage.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":439,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  collection,\n  getDocs,\n  updateDoc,\n  doc,\n  deleteDoc,\n  addDoc,\n} from \"firebase/firestore\";\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport {\n  Container,\n  Grid,\n  Typography,\n  Tabs,\n  Tab,\n  Box,\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Select,\n  MenuItem,\n  IconButton,\n  Collapse,\n  Chip,\n  Button,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Snackbar,\n  LinearProgress,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  Checkbox,\n  Card,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Switch,\n} from \"@mui/material\";\nimport {\n  KeyboardArrowDown,\n  KeyboardArrowUp,\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Delete,\n  Edit,\n  Add,\n  SaveAlt,\n  Cancel,\n  Image as ImageIcon,\n} from \"@mui/icons-material\";\nimport { db } from \"../firebase/Auth\";\n\nconst OrderStatus = {\n  PENDING: \"pending\",\n  CONFIRMED: \"confirmed\",\n  SHIPPED: \"shipped\",\n  DELIVERED: \"delivered\",\n  CANCELLED: \"cancelled\",\n};\n\nconst statusColors = {\n  [OrderStatus.PENDING]: \"warning\",\n  [OrderStatus.CONFIRMED]: \"info\",\n  [OrderStatus.SHIPPED]: \"primary\",\n  [OrderStatus.DELIVERED]: \"success\",\n  [OrderStatus.CANCELLED]: \"error\",\n};\n\nconst categories = [\"Acid Wash\", \"Graphic Hoods\", \"Totes\", \"Thirfts\"];\n\nconst AdminPage = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [orders, setOrders] = useState([]);\n  const [expandedOrder, setExpandedOrder] = useState(null);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: \"\",\n    severity: \"success\",\n  });\n  const [editMode, setEditMode] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [images, setImages] = useState([]);\n  const [imageURLs, setImageURLs] = useState([]);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    category: \"\",\n    description: \"\",\n    price: \"\",\n    stock: \"\",\n    color: \"\",\n    size: [],\n    features: \"\",\n    status: \"available\",\n  });\n\n  const sizeOptions = [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\"];\n\n  const [promocodes, setPromocodes] = useState([]);\n  const [openPromocodeDialog, setOpenPromocodeDialog] = useState(false);\n  const [promocodeFormData, setPromocodeFormData] = useState({\n    code: \"\",\n    discount: \"\",\n    valid: true,\n  });\n\n  const [editingPromocode, setEditingPromocode] = useState(null);\n\n  useEffect(() => {\n    if (tabValue === 0) {\n      fetchProducts();\n    } else if (tabValue === 1) {\n      fetchOrders();\n    } else if (tabValue === 2) {\n      fetchPromocodes();\n    }\n  }, [tabValue]);\n\n  useEffect(() => {\n    if (images.length > 0) {\n      const newImageURLs = images.map((image) => URL.createObjectURL(image));\n      setImageURLs(newImageURLs);\n      return () => newImageURLs.forEach((url) => URL.revokeObjectURL(url));\n    }\n  }, [images]);\n\n  const fetchProducts = async () => {\n    setLoading(true);\n    try {\n      const querySnapshot = await getDocs(collection(db, \"products\"));\n      setProducts(\n        querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))\n      );\n    } catch (error) {\n      showSnackbar(\"Error fetching products\", \"error\");\n    }\n    setLoading(false);\n  };\n\n  const fetchOrders = async () => {\n    setLoading(true);\n    try {\n      const querySnapshot = await getDocs(collection(db, \"orders\"));\n      const ordersData = querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n        orderDate: doc.data().orderDate?.toDate(),\n      }));\n      setOrders(ordersData.sort((a, b) => b.orderDate - a.orderDate));\n    } catch (error) {\n      showSnackbar(\"Error fetching orders\", \"error\");\n    }\n    setLoading(false);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSizeChange = (size) => {\n    setFormData((prev) => ({\n      ...prev,\n      size: prev.size.includes(size)\n        ? prev.size.filter((s) => s !== size)\n        : [...prev.size, size],\n    }));\n  };\n\n  const handleImageChange = (e) => {\n    const files = [...e.target.files].slice(0, 4);\n    setImages(files);\n  };\n\n  const handleStatusChange = async (orderId, newStatus) => {\n    try {\n      await updateDoc(doc(db, \"orders\", orderId), {\n        status: newStatus,\n        updatedAt: new Date(),\n      });\n      await fetchOrders();\n    } catch (error) {\n      showSnackbar(\"Error updating order status\", \"error\");\n    }\n  };\n\n  const showSnackbar = (message, severity = \"success\") => {\n    setSnackbar({ open: true, message, severity });\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      category: \"\",\n      description: \"\",\n      price: \"\",\n      stock: \"\",\n      color: \"\",\n      size: [],\n      features: \"\",\n      status: \"available\",\n    });\n    setImages([]);\n    setImageURLs([]);\n    setSelectedProduct(null);\n    setEditMode(false);\n  };\n\n  const handleAddProduct = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const storage = getStorage();\n      let imageUrls = [];\n      setUploadProgress(0);\n\n      if (images.length > 0) {\n        for (let i = 0; i < images.length; i++) {\n          const image = images[i];\n          const imageRef = ref(storage, `products/${Date.now()}_${image.name}`);\n          await uploadBytes(imageRef, image);\n          const url = await getDownloadURL(imageRef);\n          imageUrls.push(url);\n          setUploadProgress(((i + 1) / images.length) * 100);\n        }\n      } else if (editMode && selectedProduct) {\n        imageUrls = selectedProduct.imageUrl;\n      }\n\n      const productData = {\n        ...formData,\n        price: parseFloat(formData.price),\n        stock: parseInt(formData.stock),\n        imageUrl: imageUrls,\n        createdAt: editMode ? selectedProduct.createdAt : new Date(),\n        updatedAt: new Date(),\n      };\n\n      if (editMode && selectedProduct) {\n        await updateDoc(doc(db, \"products\", selectedProduct.id), productData);\n        showSnackbar(\"Product updated successfully\");\n      } else {\n        await addDoc(collection(db, \"products\"), productData);\n        showSnackbar(\"Product added successfully\");\n      }\n\n      resetForm();\n      setOpenDialog(false);\n      fetchProducts();\n    } catch (error) {\n      showSnackbar(\"Error saving product\", \"error\");\n    }\n    setLoading(false);\n  };\n\n  const handleEditProduct = (product) => {\n    setSelectedProduct(product);\n    setFormData({\n      name: product.name,\n      category: product.category,\n      description: product.description,\n      price: product.price.toString(),\n      stock: product.stock.toString(),\n      color: product.color || \"\",\n      size: product.size || [],\n      features: product.features || \"\",\n      status: product.status || \"available\",\n    });\n    setImageURLs(product.imageUrl || []);\n    setEditMode(true);\n    setOpenDialog(true);\n  };\n\n  const handleDeleteProduct = async (id) => {\n    if (window.confirm(\"Are you sure you want to delete this product?\")) {\n      try {\n        await deleteDoc(doc(db, \"products\", id));\n        showSnackbar(\"Product deleted successfully\");\n        fetchProducts();\n      } catch (error) {\n        showSnackbar(\"Error deleting product\", \"error\");\n      }\n    }\n  };\n\n  const calculateTotal = (items) => {\n    if (!Array.isArray(items)) return 0;\n    return (\n      items.reduce((sum, item) => {\n      const price = item?.price || 0;\n      const quantity = item?.quantity || 0;\n      return sum + price * quantity;\n      }, 0) * 0.75 + 300\n    );\n  };\n\n  const getUniqueCategories = (products) => {\n    const categories = products.map((product) => product.category);\n    return [\"All\", ...new Set(categories)];\n  };\n\n  const fetchPromocodes = async () => {\n    setLoading(true);\n    try {\n      const querySnapshot = await getDocs(collection(db, \"promocodes\"));\n      setPromocodes(\n        querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))\n      );\n    } catch (error) {\n      showSnackbar(\"Error fetching promocodes\", \"error\");\n    }\n    setLoading(false);\n  };\n\n  const handlePromocodeInputChange = (e) => {\n    const { name, value, checked } = e.target;\n    setPromocodeFormData((prev) => ({\n      ...prev,\n      [name]: name === \"valid\" ? checked : value,\n    }));\n  };\n\n  const resetPromocodeForm = () => {\n    setPromocodeFormData({\n      code: \"\",\n      discount: \"\",\n      valid: true,\n    });\n    setEditingPromocode(null);\n  };\n\n  const handleAddPromocode = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const promocodeData = {\n        ...promocodeFormData,\n        discount: parseInt(promocodeFormData.discount),\n        createdAt: editingPromocode ? editingPromocode.createdAt : new Date(),\n        updatedAt: new Date(),\n      };\n\n      if (editingPromocode) {\n        await updateDoc(\n          doc(db, \"promocodes\", editingPromocode.id),\n          promocodeData\n        );\n        showSnackbar(\"Promocode updated successfully\");\n      } else {\n        await addDoc(collection(db, \"promocodes\"), promocodeData);\n        showSnackbar(\"Promocode added successfully\");\n      }\n\n      resetPromocodeForm();\n      setOpenPromocodeDialog(false);\n      fetchPromocodes();\n    } catch (error) {\n      showSnackbar(\"Error saving promocode\", \"error\");\n    }\n    setLoading(false);\n  };\n\n  const handleEditPromocode = (promocode) => {\n    setEditingPromocode(promocode);\n    setPromocodeFormData({\n      code: promocode.code,\n      discount: promocode.discount.toString(),\n      valid: promocode.valid,\n    });\n    setOpenPromocodeDialog(true);\n  };\n\n  const handleDeletePromocode = async (id) => {\n    if (window.confirm(\"Are you sure you want to delete this promocode?\")) {\n      try {\n        await deleteDoc(doc(db, \"promocodes\", id));\n        showSnackbar(\"Promocode deleted successfully\");\n        fetchPromocodes();\n      } catch (error) {\n        showSnackbar(\"Error deleting promocode\", \"error\");\n      }\n    }\n  };\n\n  const handleTogglePromocodeStatus = async (promocode) => {\n    try {\n      await updateDoc(doc(db, \"promocodes\", promocode.id), {\n        valid: !promocode.valid,\n        updatedAt: new Date(),\n      });\n      fetchPromocodes();\n    } catch (error) {\n      showSnackbar(\"Error updating promocode status\", \"error\");\n    }\n  };\n\n  const filteredProducts =\n    selectedCategory === \"All\"\n      ? products\n      : products.filter((product) => product.category === selectedCategory);\n\n  const filteredOrders = orders.filter((order) => {\n    const matchesStatus =\n      statusFilter === \"all\" || order.status === statusFilter;\n    const searchLower = searchQuery.toLowerCase();\n    const matchesSearch =\n      order.id.toLowerCase().includes(searchLower) ||\n      order.shippingAddress?.fullName?.toLowerCase().includes(searchLower) ||\n      order.customerEmail?.toLowerCase().includes(searchLower);\n    return matchesStatus && matchesSearch;\n  });\n\n  const OrderRow = ({ order }) => {\n    const isExpanded = expandedOrder === order.id;\n    const orderItems = Array.isArray(order.items) ? order.items : [];\n\n    return (\n      <>\n        <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\n          <TableCell>\n            <IconButton\n              size=\"small\"\n              onClick={() => setExpandedOrder(isExpanded ? null : order.id)}\n            >\n              {isExpanded ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\n            </IconButton>\n          </TableCell>\n          <TableCell>{order.id.slice(-8)}</TableCell>\n          <TableCell>{order.orderDate?.toLocaleString()}</TableCell>\n          <TableCell>{order.shippingAddress?.fullName}</TableCell>\n          <TableCell>\n            <Select\n              value={order.status || \"pending\"}\n              onChange={(e) => handleStatusChange(order.id, e.target.value)}\n              size=\"small\"\n            >\n              {Object.values(OrderStatus).map((status) => (\n                <MenuItem key={status} value={status}>\n                  <Chip\n                    label={status}\n                    size=\"small\"\n                    color={statusColors[status]}\n                  />\n                </MenuItem>\n              ))}\n            </Select>\n          </TableCell>\n          <TableCell>PKR {calculateTotal(orderItems).toFixed(2)}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n            <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n              <Box sx={{ margin: 1 }}>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                  Order Details\n                </Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\">\n                      Shipping Address:\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      {order.shippingAddress?.address1}\n                      <br />\n                      {order.shippingAddress?.street}\n                      <br />\n                      {order.shippingAddress?.city},{\" \"}\n                      {order.shippingAddress?.state}{\" \"}\n                      {order.shippingAddress?.zip}\n                      <br />\n                      {order.shippingAddress?.country}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\">\n                      Customer Contact:\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      Email: {order.email}\n                      <br />\n                      Phone: {order.shippingAddress?.phoneNumber || \"N/A\"}\n                      <br />\n                      Name:{\" \"}\n                      {order.shippingAddress?.firstName +\n                        \" \" +\n                        order.shippingAddress?.lastName || \"N/A\"}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Table size=\"small\" sx={{ mt: 2 }}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product</TableCell>\n                      <TableCell>Size</TableCell>\n                      <TableCell align=\"right\">Quantity</TableCell>\n                      <TableCell align=\"right\">Price</TableCell>\n                      <TableCell align=\"right\">Total</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {orderItems.map((item, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{item.name}</TableCell>\n                        <TableCell>{item.size || \"N/A\"}</TableCell>\n                        <TableCell align=\"right\">{item.quantity}</TableCell>\n                        <TableCell align=\"right\">\n                          PKR {item.price.toFixed(2)}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          PKR {(item.price * item.quantity).toFixed(2)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    <TableRow>\n                      <TableCell colSpan={3} />\n                      <TableCell align=\"right\">Shipping:</TableCell>\n                      <TableCell align=\"right\">PKR 300.00</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell colSpan={3} />\n                      <TableCell align=\"right\">\n                        <strong>Total:</strong>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <strong>\n                          PKR {calculateTotal(orderItems).toFixed(2)}\n                        </strong>\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </Box>\n            </Collapse>\n          </TableCell>\n        </TableRow>\n      </>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Tabs\n        value={tabValue}\n        onChange={(e, newValue) => setTabValue(newValue)}\n        sx={{ mb: 4 }}\n      >\n        <Tab label=\"Products\" />\n        <Tab label=\"Orders\" />\n        <Tab label=\"Promocodes\" />\n      </Tabs>\n\n      {tabValue === 0 ? (\n        <>\n          <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n              Product Management\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={() => {\n                resetForm();\n                setOpenDialog(true);\n              }}\n            >\n              Add New Product\n            </Button>\n          </Box>\n\n          <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 4 }}>\n            <FormControl sx={{ minWidth: 200 }}>\n              <InputLabel>Filter by Category</InputLabel>\n              <Select\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n                label=\"Filter by Category\"\n              >\n                {getUniqueCategories(products).map((category) => (\n                  <MenuItem key={category} value={category}>\n                    {category}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n\n          {loading && <LinearProgress />}\n\n          <Grid container spacing={3}>\n            {filteredProducts.map((product) => (\n              <Grid item xs={12} sm={6} md={4} key={product.id}>\n                <Card>\n                  <CardMedia\n                    component=\"img\"\n                    height=\"200\"\n                    image={product.imageUrl?.[0] || \"/placeholder.png\"}\n                    alt={product.name}\n                    sx={{ objectFit: \"contain\", bgcolor: \"grey.100\" }}\n                  />\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      {product.name}\n                    </Typography>\n                    <Box sx={{ display: \"flex\", gap: 1, mb: 1 }}>\n                      <Chip label={product.category} size=\"small\" />\n                      <Chip\n                        label={`${product.stock} in stock`}\n                        size=\"small\"\n                        color={product.stock > 0 ? \"success\" : \"error\"}\n                      />\n                    </Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                      {product.description}\n                    </Typography>\n                    <Typography variant=\"h6\" color=\"primary\" sx={{ mt: 1 }}>\n                      PKR {Number(product.price).toFixed(0)}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                      size=\"small\"\n                      startIcon={<Edit />}\n                      onClick={() => handleEditProduct(product)}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      color=\"error\"\n                      startIcon={<Delete />}\n                      onClick={() => handleDeleteProduct(product.id)}\n                    >\n                      Delete\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      ) : tabValue === 1 ? (\n        <Box>\n          <Box sx={{ mb: 3, display: \"flex\", gap: 2, alignItems: \"center\" }}>\n            <TextField\n              placeholder=\"Search orders...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              size=\"small\"\n            />\n            <Select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              size=\"small\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <FilterIcon />\n                </InputAdornment>\n              }\n            >\n              <MenuItem value=\"all\">All Status</MenuItem>\n              {Object.values(OrderStatus).map((status) => (\n                <MenuItem key={status} value={status}>\n                  {status}\n                </MenuItem>\n              ))}\n            </Select>\n          </Box>\n\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell />\n                  <TableCell>Order ID</TableCell>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Customer</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Total</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredOrders.map((order) => (\n                  <OrderRow key={order.id} order={order} />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      ) : (\n        <Box>\n          <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n              Promocode Management\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={() => {\n                resetPromocodeForm();\n                setOpenPromocodeDialog(true);\n              }}\n            >\n              Add New Promocode\n            </Button>\n          </Box>\n\n          {loading && <LinearProgress />}\n\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Code</TableCell>\n                  <TableCell>Discount (%)</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Created At</TableCell>\n                  <TableCell>Updated At</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {promocodes.map((promocode) => (\n                  <TableRow key={promocode.id}>\n                    <TableCell>{promocode.code}</TableCell>\n                    <TableCell>{promocode.discount}%</TableCell>\n                    <TableCell>\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={promocode.valid}\n                            onChange={() =>\n                              handleTogglePromocodeStatus(promocode)\n                            }\n                            color=\"primary\"\n                          />\n                        }\n                        label={promocode.valid ? \"Active\" : \"Inactive\"}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {promocode.createdAt?.toDate().toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      {promocode.updatedAt?.toDate().toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleEditPromocode(promocode)}\n                      >\n                        <Edit />\n                      </IconButton>\n                      <IconButton\n                        size=\"small\"\n                        color=\"error\"\n                        onClick={() => handleDeletePromocode(promocode.id)}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      )}\n\n      <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <form onSubmit={handleAddProduct}>\n          <DialogTitle>\n            {editMode ? \"Edit Product\" : \"Add New Product\"}\n          </DialogTitle>\n          <DialogContent dividers>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Product Name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth required>\n                  <InputLabel id=\"category-label\">Category</InputLabel>\n                  <Select\n                    labelId=\"category-label\"\n                    id=\"category\"\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleInputChange}\n                    label=\"Category\"\n                  >\n                    {categories.map((category) => (\n                      <MenuItem key={category} value={category}>\n                        {category}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Price\"\n                  name=\"price\"\n                  type=\"number\"\n                  value={formData.price}\n                  onChange={handleInputChange}\n                  required\n                  InputProps={{ inputProps: { min: 0, step: \"0.01\" } }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Stock\"\n                  name=\"stock\"\n                  type=\"number\"\n                  value={formData.stock}\n                  onChange={handleInputChange}\n                  required\n                  InputProps={{ inputProps: { min: 0 } }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Color\"\n                  name=\"color\"\n                  value={formData.color}\n                  onChange={handleInputChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box>\n                  <Typography variant=\"subtitle1\">Size</Typography>\n                  {sizeOptions.map((size) => (\n                    <FormControlLabel\n                      key={size}\n                      control={\n                        <Checkbox\n                          checked={formData.size.includes(size)}\n                          onChange={() => handleSizeChange(size)}\n                        />\n                      }\n                      label={size}\n                    />\n                  ))}\n                </Box>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  required\n                  multiline\n                  rows={3}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Features\"\n                  name=\"features\"\n                  value={formData.features}\n                  onChange={handleInputChange}\n                  multiline\n                  rows={2}\n                  helperText=\"Enter product features, separated by commas\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  component=\"label\"\n                  startIcon={<ImageIcon />}\n                  sx={{ mt: 1 }}\n                >\n                  Upload Images (max 4)\n                  <input\n                    type=\"file\"\n                    hidden\n                    multiple\n                    accept=\"image/*\"\n                    onChange={handleImageChange}\n                    max=\"4\"\n                  />\n                </Button>\n                <Box sx={{ mt: 2, display: \"flex\", gap: 1 }}>\n                  {imageURLs.map((url, index) => (\n                    <img\n                      key={index}\n                      src={url}\n                      alt={`Preview ${index + 1}`}\n                      style={{ width: 100, height: 100, objectFit: \"cover\" }}\n                    />\n                  ))}\n                </Box>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)} startIcon={<Cancel />}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              disabled={loading}\n              startIcon={<SaveAlt />}\n            >\n              {editMode ? \"Update\" : \"Save\"} Product\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          sx={{ width: \"100%\" }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n\n      <Dialog\n        open={openPromocodeDialog}\n        onClose={() => setOpenPromocodeDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <form onSubmit={handleAddPromocode}>\n          <DialogTitle>\n            {editingPromocode ? \"Edit Promocode\" : \"Add New Promocode\"}\n          </DialogTitle>\n          <DialogContent dividers>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Promocode\"\n                  name=\"code\"\n                  value={promocodeFormData.code}\n                  onChange={handlePromocodeInputChange}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Discount Percentage\"\n                  name=\"discount\"\n                  type=\"number\"\n                  value={promocodeFormData.discount}\n                  onChange={handlePromocodeInputChange}\n                  required\n                  InputProps={{\n                    inputProps: { min: 0, max: 500 },\n                    endAdornment: (\n                      <InputAdornment position=\"end\">%</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={promocodeFormData.valid}\n                      onChange={handlePromocodeInputChange}\n                      name=\"valid\"\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Active\"\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={() => setOpenPromocodeDialog(false)}\n              startIcon={<Cancel />}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              disabled={loading}\n              startIcon={<SaveAlt />}\n            >\n              {editingPromocode ? \"Update\" : \"Save\"} Promocode\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          sx={{ width: \"100%\" }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default AdminPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Cart.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":158,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Card from \"@mui/material/Card\";\nimport Box from \"@mui/material/Box\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  CardMedia,\n  CardContent,\n  Button,\n  IconButton,\n  Divider,\n  TextField,\n  Alert,\n  CircularProgress,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material\";\nimport { getSubtotal } from \"../utils\";\nimport {\n  addToCart,\n  removeFromCart,\n  removeAllFromCart,\n  applyPromocode,\n  removePromocode,\n} from \"../feature/cart-slice\";\nimport { useNavigate } from \"react-router-dom\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { styled } from \"@mui/material/styles\";\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { db } from \"../firebase/Auth\";\n\nconst ResponsiveCard = styled(Card)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  padding: theme.spacing(2),\n  [theme.breakpoints.down(\"sm\")]: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n  },\n}));\n\nconst ResponsiveCardContent = styled(CardContent)(({ theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"flex-start\",\n  flex: 1,\n  width: \"100%\",\n  [theme.breakpoints.down(\"sm\")]: {\n    flexDirection: \"column\",\n    gap: theme.spacing(2),\n  },\n}));\n\nconst ProductImage = styled(CardMedia)(({ theme }) => ({\n  width: theme.spacing(20),\n  height: theme.spacing(25),\n  objectFit: \"cover\",\n  borderRadius: theme.spacing(1),\n  [theme.breakpoints.down(\"sm\")]: {\n    width: \"100%\",\n    height: theme.spacing(40),\n  },\n}));\n\nexport default function Cart() {\n  const cart = useSelector((state) => state.cart?.value);\n  const appliedPromocode = useSelector((state) => state.cart?.appliedPromocode);\n  const promocodeDiscount = useSelector(\n    (state) => state.cart?.promocodeDiscount\n  );\n  const subtotal = getSubtotal(cart)?.toFixed(2);\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [promocode, setPromocode] = useState(\"\");\n  const [promocodeError, setPromocodeError] = useState(\"\");\n  const [isValidating, setIsValidating] = useState(false);\n\n  // Calculate final total after discount\n  const discountAmount = (subtotal * (promocodeDiscount / 100)).toFixed(2);\n  const finalTotal = (subtotal - discountAmount).toFixed(2);\n\n  async function validatePromocode(code) {\n    try {\n      const promocodesRef = collection(db, \"promocodes\");\n      const q = query(promocodesRef, where(\"code\", \"==\", code.toLowerCase()));\n\n      const querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        const promocodeDoc = querySnapshot.docs[0].data();\n        return {\n          valid: promocodeDoc.valid,\n          discount: promocodeDoc.discount,\n          code: promocodeDoc.code,\n        };\n      }\n\n      return { valid: false };\n    } catch (error) {\n      console.error(\"Error validating promocode:\", error);\n      throw new Error(\"Failed to validate promocode\");\n    }\n  }\n\n  async function handlePromocodeSubmit() {\n    if (!promocode.trim()) return;\n\n    setPromocodeError(\"\");\n    setIsValidating(true);\n\n    try {\n      const result = await validatePromocode(promocode);\n\n      if (result.valid) {\n        dispatch(\n          applyPromocode({\n            code: result.code,\n            discount: result.discount,\n          })\n        );\n        setPromocode(\"\");\n      } else {\n        setPromocodeError(\"Invalid or inactive promocode\");\n      }\n    } catch (error) {\n      setPromocodeError(\"Error validating promocode\");\n    } finally {\n      setIsValidating(false);\n    }\n  }\n\n  function handleRemovePromocode() {\n    dispatch(removePromocode());\n    setPromocode(\"\");\n    setPromocodeError(\"\");\n  }\n\n  function incrementQuantity(product, color, size) {\n    dispatch(addToCart({ product, quantity: 1, color, size }));\n  }\n\n  function decrementQuantity(product, color, size) {\n    dispatch(removeFromCart({ product, color, size }));\n  }\n\n  function removeItem(product, color, size) {\n    dispatch(removeAllFromCart({ product, color, size }));\n  }\n\n  if (!cart?.length) {\n    return (\n      <Container sx={{ py: { xs: 4, md: 8 }, px: { xs: 2, md: 3 } }}>\n        <Card sx={{ p: 4, textAlign: \"center\" }}>\n          <Typography variant=\"h5\" gutterBottom>\n            Your cart is empty\n          </Typography>\n          <Button\n            variant=\"contained\"\n            onClick={() => navigate(\"/\")}\n            sx={{ mt: 2 }}\n          >\n            Continue Shopping\n          </Button>\n        </Card>\n      </Container>\n    );\n  }\n\n  return (\n    <Container sx={{ py: { xs: 4, md: 8 }, px: { xs: 2, md: 3 } }}>\n      <Typography variant=\"h4\" gutterBottom sx={{ mb: 4 }}>\n        Shopping Cart ({cart.length} {cart.length === 1 ? \"item\" : \"items\"})\n      </Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12} md={8}>\n          <Grid container spacing={2}>\n            {cart?.map(({ product, quantity, color, size }) => {\n              const { name, id, price, imageUrl } = product;\n              return (\n                <Grid item key={id + size} xs={12}>\n                  <ResponsiveCard>\n                    <ProductImage\n                      component=\"img\"\n                      image={Array.isArray(imageUrl) ? imageUrl[0] : imageUrl}\n                      alt={name}\n                    />\n                    <ResponsiveCardContent>\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          gap: 1,\n                          flex: 1,\n                        }}\n                      >\n                        <Typography\n                          variant=\"h6\"\n                          sx={{\n                            fontSize: { xs: \"1rem\", sm: \"1.25rem\" },\n                          }}\n                        >\n                          {name}\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {color && `Color: ${color}`}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {size && `Size: ${size}`}\n                        </Typography>\n\n                        <Box\n                          sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}\n                        >\n                          <IconButton\n                            aria-label=\"decrease quantity\"\n                            onClick={() =>\n                              decrementQuantity(product, color, size)\n                            }\n                            disabled={quantity <= 1}\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                          <Typography variant=\"body2\" sx={{ mx: 2 }}>\n                            {quantity}\n                          </Typography>\n                          <IconButton\n                            aria-label=\"increase quantity\"\n                            onClick={() =>\n                              incrementQuantity(product, color, size)\n                            }\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </Box>\n                      </Box>\n\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          alignItems: { xs: \"center\", sm: \"flex-end\" },\n                          gap: 1,\n                          minWidth: { sm: \"120px\" },\n                        }}\n                      >\n                        <Typography variant=\"h6\">\n                          PKR {(price * quantity).toFixed(2)}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          PKR {price.toFixed(2)} each\n                        </Typography>\n                        <IconButton\n                          aria-label=\"delete\"\n                          onClick={() => removeItem(product, color, size)}\n                          sx={{\n                            color: theme.palette.error.main,\n                            mt: 1,\n                          }}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Box>\n                    </ResponsiveCardContent>\n                  </ResponsiveCard>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Card\n            sx={{\n              padding: 3,\n              position: { md: \"sticky\" },\n              top: { md: theme.spacing(2) },\n            }}\n          >\n            <Typography variant=\"h5\" gutterBottom>\n              Order Summary\n            </Typography>\n            <Divider sx={{ my: 2 }} />\n\n            <Box sx={{ mb: 3 }}>\n              {appliedPromocode ? (\n                <Box sx={{ mb: 2 }}>\n                  <Alert\n                    severity=\"success\"\n                    action={\n                      <Button\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={handleRemovePromocode}\n                      >\n                        Remove\n                      </Button>\n                    }\n                  >\n                    Promocode {appliedPromocode} applied ({promocodeDiscount}\n                    {promocodeDiscount >= 100 ? \" PKR off\" : \"% off\"})\n                  </Alert>\n                </Box>\n              ) : (\n                <Box sx={{ mb: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Promocode\"\n                    value={promocode}\n                    onChange={(e) => setPromocode(e.target.value)}\n                    error={Boolean(promocodeError)}\n                    helperText={promocodeError}\n                    sx={{ mb: 1 }}\n                    disabled={isValidating}\n                  />\n                  <Button\n                    fullWidth\n                    variant=\"outlined\"\n                    onClick={handlePromocodeSubmit}\n                    disabled={!promocode || isValidating}\n                    startIcon={\n                      isValidating ? <CircularProgress size={20} /> : null\n                    }\n                  >\n                    {isValidating ? \"Validating...\" : \"Apply Promocode\"}\n                  </Button>\n                </Box>\n              )}\n            </Box>\n\n            <Box\n              sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}\n            >\n              <Typography>Subtotal</Typography>\n              <Typography>PKR {subtotal}</Typography>\n            </Box>\n\n            {appliedPromocode && (\n              <Box\n                sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}\n              >\n                <Typography>\n                  Discount ({promocodeDiscount}\n                  {promocodeDiscount >= 100 ? \" PKR\" : \"%\"})\n                </Typography>\n                <Typography color=\"error\">\n                  - PKR{\" \"}\n                  {promocodeDiscount >= 100\n                    ? promocodeDiscount\n                    : (subtotal * promocodeDiscount) / 100}\n                </Typography>\n              </Box>\n            )}\n\n            <Box\n              sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}\n            >\n              <Typography>Shipping</Typography>\n              <Typography>\n                {promocodeDiscount >= 100 ? \"Free\" : \"Calculated at checkout\"}\n              </Typography>\n            </Box>\n\n            <Divider sx={{ my: 2 }} />\n\n            <Box\n              sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 3 }}\n            >\n              <Typography variant=\"h6\">Total</Typography>\n              <Typography variant=\"h6\">\n                PKR{\" \"}\n                {promocodeDiscount >= 100\n                  ? subtotal\n                  : subtotal - (subtotal * promocodeDiscount) / 100}\n              </Typography>\n            </Box>\n\n            <Button\n              variant=\"contained\"\n              fullWidth\n              size=\"large\"\n              onClick={() => navigate(\"/checkout\")}\n              sx={{ mb: 2 }}\n            >\n              Proceed to Checkout\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              fullWidth\n              size=\"large\"\n              onClick={() => navigate(\"/\")}\n            >\n              Continue Shopping\n            </Button>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/CategoryPage.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":123,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useParams, useNavigate, Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Button,\n  Rating,\n  Chip,\n  Box,\n  useTheme,\n  useMediaQuery,\n  Breadcrumbs,\n  Link,\n} from '@mui/material';\nimport { ShoppingCart, LocalOffer, NavigateNext } from '@mui/icons-material';\nimport { styled } from '@mui/system';\nimport { addToCart } from '../feature/cart-slice';\nimport { selectAllProducts, selectProductsLoading } from '../feature/products-slice';\nimport { selectAllCategories, setSelectedCategory } from '../feature/categories-slice';\n\n// Styled Components\nconst ProductCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  borderRadius: theme.shape.borderRadius * 2,\n  overflow: 'hidden',\n  [theme.breakpoints.up('md')]: {\n    '&:hover': {\n      transform: 'translateY(-5px)',\n      boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    '&:active': {\n      transform: 'scale(0.98)',\n    },\n  },\n}));\n\nconst ProductImage = styled(CardMedia)(({ theme }) => ({\n  paddingTop: '100%',\n  backgroundSize: 'contain',\n  backgroundColor: '#f5f5f5',\n  [theme.breakpoints.down('sm')]: {\n    paddingTop: '75%',\n  },\n}));\n\nconst ProductTitle = styled(Typography)(({ theme }) => ({\n  fontWeight: 600,\n  fontSize: '1.1rem',\n  marginBottom: theme.spacing(1),\n  height: '3em',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  display: '-webkit-box',\n  WebkitLineClamp: 2,\n  WebkitBoxOrient: 'vertical',\n  [theme.breakpoints.down('sm')]: {\n    fontSize: '0.9rem',\n    height: '2.7em',\n  },\n}));\n\nconst ProductPrice = styled(Typography)(({ theme }) => ({\n  fontWeight: 700,\n  color: theme.palette.primary.main,\n  marginBottom: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(0.5),\n  [theme.breakpoints.down('sm')]: {\n    fontSize: '0.9rem',\n  },\n}));\n\nconst AddToCartButton = styled(Button)(({ theme }) => ({\n  marginTop: 'auto',\n  borderRadius: theme.shape.borderRadius * 3,\n  [theme.breakpoints.down('sm')]: {\n    padding: theme.spacing(1, 2),\n    fontSize: '0.8rem',\n  },\n}));\n\nconst CategoryPage = () => {\n  const { categoryId } = useParams();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const products = useSelector(selectAllProducts);\n  const loading = useSelector(selectProductsLoading);\n  const categories = useSelector(selectAllCategories);\n\n  const category = categories.find(cat => cat.id === categoryId);\n  const categoryProducts = products.filter(product => product.category === category?.name);\n\n  // Reset category selection when navigating to home\n  const handleHomeClick = (e) => {\n    e.preventDefault();\n    dispatch(setSelectedCategory('all'));\n    navigate('/');\n  };\n\n  // Scroll to top when category changes\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [categoryId]);\n\n  if (!category) {\n    return (\n      <Container>\n        <Typography variant=\"h4\" align=\"center\" sx={{ mt: 4 }}>\n          Category not found\n        </Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: isSmallScreen ? 4 : 8 }}>\n      <Breadcrumbs \n        separator={<NavigateNext fontSize=\"small\" />} \n        sx={{ mb: 4 }}\n      >\n        <Link \n          color=\"inherit\" \n          href=\"/\"\n          onClick={handleHomeClick}\n          sx={{ cursor: 'pointer' }}\n        >\n          Home\n        </Link>\n        <Typography color=\"text.primary\" sx={{ textTransform: 'capitalize' }}>\n          {category.name}\n        </Typography>\n      </Breadcrumbs>\n\n      <Typography \n        variant={isSmallScreen ? 'h4' : 'h3'} \n        component=\"h1\" \n        gutterBottom\n        sx={{\n          mb: 4,\n          fontWeight: 700,\n          textTransform: 'capitalize',\n        }}\n      >\n        {category.name}\n        <Typography \n          component=\"span\" \n          color=\"text.secondary\" \n          sx={{ ml: 2, fontSize: '0.7em' }}\n        >\n          ({categoryProducts.length} products)\n        </Typography>\n      </Typography>\n\n      {loading ? (\n        <Typography variant=\"h5\" align=\"center\">Loading products...</Typography>\n      ) : categoryProducts.length === 0 ? (\n        <Typography variant=\"h6\" align=\"center\">No products found in this category.</Typography>\n      ) : (\n        <Grid container spacing={isSmallScreen ? 3 : 4}>\n          <AnimatePresence>\n            {categoryProducts.map((product, index) => (\n              <Grid item key={product.id} xs={6} sm={6} md={4} lg={3}>\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 20 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                >\n                  <ProductCard elevation={3}>\n                    <RouterLink\n                      to={`/product/${product.id}`}\n                      style={{ textDecoration: 'none', color: 'inherit' }}\n                    >\n                      <ProductImage\n                        image={product.imageUrl || product.image}\n                        title={product.name || product.title}\n                      />\n                      <CardContent\n                        sx={{\n                          p: isSmallScreen ? 1.5 : 2,\n                          '&:last-child': { pb: isSmallScreen ? 1.5 : 2 },\n                        }}\n                      >\n                        <ProductTitle \n                          variant=\"h6\" \n                          component=\"h3\"\n                          sx={{\n                            fontSize: isSmallScreen ? '0.9rem' : '1.1rem',\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          {product.name || product.title}\n                        </ProductTitle>\n                        <ProductPrice\n                          variant=\"h6\"\n                          sx={{\n                            fontSize: isSmallScreen ? '1.1rem' : '1.25rem',\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          <LocalOffer fontSize=\"small\" />\n                          PKR {typeof product.price === 'number' ? product.price.toFixed(2) : product.price}\n                        </ProductPrice>\n                        <Box\n                          sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            gap: 1,\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          {product.rating && (\n                            <>\n                              <Rating\n                                value={product.rating.rate}\n                                precision={0.5}\n                                readOnly\n                                size={isSmallScreen ? 'small' : 'medium'}\n                              />\n                              <Typography\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                                sx={{ fontSize: isSmallScreen ? '0.75rem' : '0.875rem' }}\n                              >\n                                ({product.rating.count})\n                              </Typography>\n                            </>\n                          )}\n                        </Box>\n                        {product.category && (\n                          <Chip\n                            label={product.category}\n                            size={isSmallScreen ? 'small' : 'medium'}\n                            sx={{\n                              mt: 0.5,\n                              borderRadius: '16px',\n                              fontSize: isSmallScreen ? '0.7rem' : '0.875rem',\n                            }}\n                          />\n                        )}\n                      </CardContent>\n                    </RouterLink>\n                    <CardActions sx={{ p: isSmallScreen ? 1.5 : 2, pt: 0 }}>\n                      <RouterLink\n                        to={`/product/${product.id}`}\n                        style={{ textDecoration: 'none', color: 'inherit', width: '100%' }}\n                      >\n                        <AddToCartButton\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          startIcon={<ShoppingCart />}\n                          sx={{\n                            fontSize: isSmallScreen ? '0.8rem' : '0.9rem',\n                            py: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          View Details\n                        </AddToCartButton>\n                      </RouterLink>\n                    </CardActions>\n                  </ProductCard>\n                </motion.div>\n              </Grid>\n            ))}\n          </AnimatePresence>\n        </Grid>\n      )}\n    </Container>\n  );\n};\n\nexport default CategoryPage;","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Checkout.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":27,"column":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../firebase/Auth\";\nimport {\n  Container,\n  Paper,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  Typography,\n  Box,\n  Alert,\n} from \"@mui/material\";\nimport AddressForm from \"../components/AddressForm\";\nimport ReviewForm from \"../components/ReviewForm\";\nimport { clearCart } from \"../feature/cart-slice\";\nimport { clearCheckoutInformation } from \"../feature/checkout-slice\";\nimport { createOrder } from \"../feature/orderService\";\n\nconst steps = [\"Shipping Address\", \"Review Order\"];\n\nfunction getStepContent(activeStep, onValidityChange) {\n  switch (activeStep) {\n    case 0:\n      return <AddressForm onValidityChange={onValidityChange} />;\n    case 1:\n      return <ReviewForm />;\n    default:\n      throw new Error(\"Unknown step\");\n  }\n}\n\nexport default function Checkout() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [orderId, setOrderId] = useState(null);\n  const [error, setError] = useState(null);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n\n  const cart = useSelector((state) => state.cart.value);\n  const address = useSelector((state) => state.checkout.address);\n  const promocodeDiscount = useSelector((state) => state.cart?.promocodeDiscount) || 0;\n  const standardShippingCost = 300;\n\n  // Calculate totals\n  const subtotal = cart.reduce(\n    (sum, item) => sum + item.product.price * item.quantity,\n    0\n  );\n\n  // Determine effective shipping cost and discount\n  const effectiveShippingCost = promocodeDiscount >= 300 ? 0 : standardShippingCost;\n  const effectivePromocodeDiscount = promocodeDiscount >= 300 ? 0 : promocodeDiscount;\n\n  // Calculate final total\n  const discountAmount = (subtotal * (effectivePromocodeDiscount / 100));\n  const totalWithDiscount = subtotal - discountAmount + effectiveShippingCost;\n\n  const handleValidityChange = (isValid) => {\n    setIsFormValid(isValid);\n  };\n\n  const handlePlaceOrder = async () => {\n    try {\n      if (!user) {\n        setError(\"Please sign in to place an order\");\n        return;\n      }\n\n      const orderData = {\n        address,\n        subtotal,\n        discount: discountAmount,\n        shippingCost: effectiveShippingCost,\n        total: totalWithDiscount,\n        promocodeDiscount: effectivePromocodeDiscount\n      };\n\n      const newOrderId = await createOrder(orderData, cart, user.uid);\n      setOrderId(newOrderId);\n      setActiveStep(activeStep + 1);\n\n      // Clear cart and checkout info after successful order\n      dispatch(clearCart());\n      dispatch(clearCheckoutInformation());\n    } catch (error) {\n      console.error(\"Error placing order:\", error);\n      setError(error.message || \"Failed to place order. Please try again.\");\n    }\n  };\n\n  function handleNext() {\n    if (activeStep === steps.length - 1) {\n      handlePlaceOrder();\n    } else {\n      setActiveStep(activeStep + 1);\n    }\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1);\n  }\n\n  return (\n    <Container component=\"section\" maxWidth=\"lg\" sx={{ mb: 4 }}>\n      <Paper\n        variant=\"outlined\"\n        sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}\n      >\n        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n          Checkout\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        {activeStep === steps.length ? (\n          <>\n            <Typography variant=\"h5\" gutterBottom>\n              Thank you for your order!\n            </Typography>\n            <Typography variant=\"subtitle1\">\n              Your order ID is {orderId}. We will send you a confirmation email\n              with your order details.\n            </Typography>\n            <Typography variant=\"body1\" sx={{ mt: 2 }}>\n              Payment of PKR {totalWithDiscount.toFixed(2)} will be collected upon delivery.\n              {effectiveShippingCost === 0 && (\n                <Typography variant=\"body2\" color=\"success.main\" sx={{ mt: 1 }}>\n                  Free shipping applied! (Saved PKR {standardShippingCost})\n                </Typography>\n              )}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              onClick={() => navigate(\"/\")}\n              sx={{ mt: 3 }}\n            >\n              Continue Shopping\n            </Button>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleValidityChange)}\n            <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n              {activeStep !== 0 && (\n                <Button\n                  onClick={handleBack}\n                  sx={{ mt: 3, ml: 1 }}\n                  variant=\"outlined\"\n                >\n                  Back\n                </Button>\n              )}\n              <Button\n                variant=\"contained\"\n                onClick={handleNext}\n                sx={{ mt: 3, ml: 1 }}\n                disabled={\n                  (!user && activeStep === steps.length - 1) ||\n                  (activeStep === 0 && !isFormValid)\n                }\n              >\n                {activeStep === steps.length - 1 ? \"Place Order\" : \"Next\"}\n              </Button>\n            </Box>\n          </>\n        )}\n      </Paper>\n    </Container>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/ForgotPassword.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":76,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Button,\n  TextField,\n  Typography,\n  Box,\n  Link,\n  Card,\n  CardContent,\n  InputAdornment,\n  Alert,\n  CircularProgress,\n  Backdrop,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport EmailIcon from '@mui/icons-material/Email';\nimport { useAuth } from '../firebase/Auth';\nimport { useNavigate } from 'react-router-dom';\n\nconst GradientBackground = styled(Box)(({ theme }) => ({\n  minHeight: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,\n}));\n\nconst ResetCard = styled(Card)(({ theme }) => ({\n  minWidth: 300,\n  maxWidth: 400,\n  padding: theme.spacing(3),\n  backgroundColor: 'rgba(44, 44, 45, 0.9)',\n  backdropFilter: 'blur(10px)',\n  boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.37)',\n  borderRadius: theme.shape.borderRadius,\n  color: theme.palette.text.primary,\n}));\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  marginBottom: theme.spacing(2),\n  background: `linear-gradient(45deg, ${theme.palette.primary.dark} 30%, ${theme.palette.secondary.dark} 90%)`,\n  border: 0,\n  borderRadius: 3,\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  color: theme.palette.common.white,\n  height: 48,\n  padding: '0 30px',\n}));\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const { resetPassword } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess(false);\n\n    try {\n      await resetPassword(email);\n      setSuccess(true);\n    } catch (err) {\n      setError(err.message || 'Failed to send password reset email.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <GradientBackground>\n      <ResetCard>\n        <CardContent>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\n            Reset Password\n          </Typography>\n          <Typography variant=\"body1\" align=\"center\" sx={{ mb: 3 }}>\n            Enter your email address and we'll send you a link to reset your password.\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <EmailIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            {error && (\n              <Alert severity=\"error\" sx={{ mt: 2 }}>\n                {error}\n              </Alert>\n            )}\n            {success && (\n              <Alert severity=\"success\" sx={{ mt: 2 }}>\n                Password reset email sent! Check your inbox.\n              </Alert>\n            )}\n            <StyledButton\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={loading}\n            >\n              Send Reset Link\n            </StyledButton>\n            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n              <Link\n                href=\"/login\"\n                variant=\"body2\"\n                color=\"primary\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  navigate('/login');\n                }}\n              >\n                Back to Login\n              </Link>\n            </Box>\n          </Box>\n        </CardContent>\n      </ResetCard>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={loading}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </GradientBackground>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Home.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":258,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSearchParams, Link } from \"react-router-dom\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Container,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Rating,\n  Chip,\n  Snackbar,\n  Alert,\n  Box,\n  Divider,\n  useTheme,\n  useMediaQuery,\n} from \"@mui/material\";\nimport {\n  ShoppingCart,\n  Search,\n  LocalOffer,\n  ExpandMore,\n  ExpandLess,\n} from \"@mui/icons-material\";\nimport { styled } from \"@mui/system\";\nimport { addToCart } from \"../feature/cart-slice\";\nimport {\n  fetchAllProducts,\n  selectAllProducts,\n  selectProductsLoading,\n} from \"../feature/products-slice\";\n\nconst HeroSection = styled(\"section\")(({ theme }) => ({\n  minHeight: \"100vh\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: \"#fff\",\n  backgroundImage: 'url(\"/path-to-your-background-image.jpg\")',\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center\",\n  position: \"relative\",\n  padding: theme.spacing(4, 2),\n  textAlign: \"center\",\n  \"&::before\": {\n    content: '\"\"',\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n  },\n}));\n\nconst ProductCard = styled(Card)(({ theme }) => ({\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  transition: \"transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out\",\n  borderRadius: theme.shape.borderRadius * 2,\n  overflow: \"hidden\",\n  [theme.breakpoints.up(\"md\")]: {\n    \"&:hover\": {\n      transform: \"translateY(-5px)\",\n      boxShadow: \"0 12px 20px rgba(0, 0, 0, 0.1)\",\n    },\n  },\n  [theme.breakpoints.down(\"sm\")]: {\n    \"&:active\": {\n      transform: \"scale(0.98)\",\n    },\n  },\n}));\n\nconst ProductImage = styled(CardMedia)(({ theme }) => ({\n  paddingTop: \"100%\", // Make it square\n  backgroundSize: \"contain\",\n  backgroundColor: \"#f5f5f5\",\n  [theme.breakpoints.down(\"sm\")]: {\n    paddingTop: \"75%\", // Shorter on mobile\n  },\n}));\n\nconst ProductTitle = styled(Typography)(({ theme }) => ({\n  fontWeight: 600,\n  fontSize: \"1.1rem\",\n  marginBottom: theme.spacing(1),\n  height: \"3em\",\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  display: \"-webkit-box\",\n  WebkitLineClamp: 2,\n  WebkitBoxOrient: \"vertical\",\n  [theme.breakpoints.down(\"sm\")]: {\n    fontSize: \"0.9rem\",\n    height: \"2.7em\",\n  },\n}));\n\nconst ProductPrice = styled(Typography)(({ theme }) => ({\n  fontWeight: 700,\n  color: theme.palette.primary.main,\n  marginBottom: theme.spacing(1),\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: theme.spacing(0.5),\n  [theme.breakpoints.down(\"sm\")]: {\n    fontSize: \"0.9rem\",\n  },\n}));\n\nconst AddToCartButton = styled(Button)(({ theme }) => ({\n  marginTop: \"auto\",\n  borderRadius: theme.shape.borderRadius * 3,\n  [theme.breakpoints.down(\"sm\")]: {\n    padding: theme.spacing(1, 2),\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst ExpandButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  borderRadius: theme.shape.borderRadius * 3,\n  width: \"100%\",\n  backgroundColor: theme.palette.primary.main,\n  color: theme.palette.primary.contrastText,\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  padding: theme.spacing(1),\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  gap: theme.spacing(1),\n  boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\", // Added subtle shadow\n}));\n\nconst CategoryHeader = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  marginBottom: theme.spacing(2),\n  [theme.breakpoints.down(\"sm\")]: {\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    gap: theme.spacing(1),\n  },\n}));\n\nconst CategoryDivider = styled(Divider)(({ theme }) => ({\n  margin: theme.spacing(6, 0, 4),\n  \"&::before, &::after\": {\n    borderColor: theme.palette.primary.main,\n  },\n  [theme.breakpoints.down(\"sm\")]: {\n    margin: theme.spacing(4, 0, 3),\n  },\n}));\n\nconst CategoryTitle = styled(Typography)(({ theme }) => ({\n  color: theme.palette.primary.main,\n  fontWeight: 700,\n  textTransform: \"uppercase\",\n  letterSpacing: \"0.1em\",\n  [theme.breakpoints.down(\"sm\")]: {\n    fontSize: \"1.2rem\",\n  },\n}));\n\nexport default function Home() {\n  const [searchParams] = useSearchParams();\n  const category = searchParams.get(\"category\");\n  const searchTerm = searchParams.get(\"searchTerm\")?.toLowerCase(); // Ensure lowercase for consistent search\n\n  // Updated Redux selectors\n  const products = useSelector(selectAllProducts);\n  const loading = useSelector(selectProductsLoading);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const productsSectionRef = useRef(null);\n\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  useEffect(() => {\n    if (!products?.length) {\n      dispatch(fetchAllProducts());\n    }\n  }, [dispatch, products]);\n\n  const addProductToCart = (product) => {\n    dispatch(addToCart({ product, quantity: 1 }));\n    setSnackbarMessage(`${product.name} added to cart`);\n    setSnackbarOpen(true);\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const filteredProducts = products?.filter((product) => {\n    const categoryMatch =\n      !category || category === \"all\" || product.category === category;\n    const searchMatch =\n      !searchTerm ||\n      product.name.toLowerCase().includes(searchTerm) ||\n      (product.category && product.category.toLowerCase().includes(searchTerm));\n    return categoryMatch && searchMatch;\n  });\n\n  const groupedProducts = filteredProducts?.reduce((acc, product) => {\n    const category = product.category || \"Uncategorized\";\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(product);\n    return acc;\n  }, {});\n\n  const handleExploreProductsClick = () => {\n    if (productsSectionRef.current) {\n      productsSectionRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const toggleCategory = (category) => {\n    setExpandedCategories((prev) => ({\n      ...prev,\n      [category]: !prev[category],\n    }));\n  };\n\n  const getInitialDisplayCount = () => {\n    if (isSmallScreen) return 3; // Show 2 products on mobile\n    if (isMediumScreen) return 3; // Show 3 products on tablet\n    return 4; // Show 4 products on desktop\n  };\n\n  const renderProductGrid = (categoryProducts, categoryName) => {\n    const initialDisplayCount = getInitialDisplayCount();\n    const isExpanded = expandedCategories[categoryName];\n    const displayedProducts = isExpanded\n      ? categoryProducts\n      : categoryProducts.slice(0, initialDisplayCount);\n    const hasMoreProducts = categoryProducts.length > initialDisplayCount;\n\n    return (\n      <>\n        <Grid container spacing={isSmallScreen ? 3 : 4}>\n          <AnimatePresence>\n            {displayedProducts.map((product, index) => (\n              <Grid item key={product.id} xs={6} sm={6} md={4} lg={3}>\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 20 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                >\n                  <ProductCard elevation={3}>\n                    <Link\n                      to={`/product/${product.id}`}\n                      style={{ textDecoration: \"none\", color: \"inherit\" }}\n                    >\n                      <ProductImage\n                        image={product.imageUrl || product.image} // Handle both imageUrl and image properties\n                        title={product.name || product.title} // Handle both name and title properties\n                      />\n                      <CardContent\n                        sx={{\n                          p: isSmallScreen ? 1.5 : 2,\n                          \"&:last-child\": { pb: isSmallScreen ? 1.5 : 2 },\n                        }}\n                      >\n                        <ProductTitle\n                          variant=\"h6\"\n                          component=\"h3\"\n                          sx={{\n                            fontSize: isSmallScreen ? \"0.9rem\" : \"1.1rem\",\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          {product.name || product.title}\n                        </ProductTitle>\n                        <ProductPrice\n                          variant=\"h6\"\n                          sx={{\n                            fontSize: isSmallScreen ? \"1.1rem\" : \"1.25rem\",\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          <LocalOffer fontSize=\"small\" />\n                          PKR\n                          {typeof product.price === \"number\"\n                            ? product.price.toFixed(2)\n                            : product.price}\n                        </ProductPrice>\n                        <Box\n                          sx={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            gap: 1,\n                            mb: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          {product.rating ? (\n                            <>\n                              <Rating\n                                value={product.rating.rate}\n                                precision={0.5}\n                                readOnly\n                                size={isSmallScreen ? \"small\" : \"medium\"}\n                              />\n                              <Typography\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                                sx={{\n                                  fontSize: isSmallScreen\n                                    ? \"0.75rem\"\n                                    : \"0.875rem\",\n                                }}\n                              >\n                                ({product.rating.count})\n                              </Typography>\n                            </>\n                          ) : null}\n                        </Box>\n                        {product.category && (\n                          <Chip\n                            label={product.category}\n                            size={isSmallScreen ? \"small\" : \"medium\"}\n                            sx={{\n                              mt: 0.5,\n                              borderRadius: \"16px\",\n                              fontSize: isSmallScreen ? \"0.7rem\" : \"0.875rem\",\n                            }}\n                          />\n                        )}\n                      </CardContent>\n                    </Link>\n                    <CardActions sx={{ p: isSmallScreen ? 1.5 : 2, pt: 0 }}>\n                      <Link\n                        to={`/product/${product.id}`}\n                        style={{\n                          textDecoration: \"none\",\n                          color: \"inherit\",\n                          width: \"100%\",\n                        }}\n                      >\n                        <AddToCartButton\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          startIcon={<ShoppingCart />}\n                          sx={{\n                            fontSize: isSmallScreen ? \"0.8rem\" : \"0.9rem\",\n                            py: isSmallScreen ? 0.5 : 1,\n                          }}\n                        >\n                          View Details\n                        </AddToCartButton>\n                      </Link>\n                    </CardActions>\n                  </ProductCard>\n                </motion.div>\n              </Grid>\n            ))}\n          </AnimatePresence>\n        </Grid>\n        {hasMoreProducts && (\n          <Box sx={{ mt: 2, px: 2 }}>\n            {\" \"}\n            {/* Added padding for better spacing */}\n            <ExpandButton\n              onClick={() => toggleCategory(categoryName)}\n              endIcon={\n                expandedCategories[categoryName] ? (\n                  <ExpandLess />\n                ) : (\n                  <ExpandMore />\n                )\n              }\n              variant=\"contained\" // Added variant for better visibility\n              disableElevation // Disabled default elevation\n            >\n              <span style={{ flexGrow: 1, textAlign: \"center\" }}>\n                {\" \"}\n                {/* Added span for better text alignment */}\n                {expandedCategories[categoryName]\n                  ? \"Show Less\"\n                  : `Show All ${categoryProducts.length} Products`}\n              </span>\n            </ExpandButton>\n          </Box>\n        )}\n      </>\n    );\n  };\n\n  // Add effect to scroll to products section when search params change\n  useEffect(() => {\n    if (searchTerm || category) {\n      const productsSection = document.getElementById(\"products\");\n      if (productsSection) {\n        productsSection.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }, [searchTerm, category]);\n\n  return (\n    <>\n      {/* Keep the HeroSection as is */}\n\n      <HeroSection>\n        <Container maxWidth=\"md\" sx={{ position: \"relative\", zIndex: 1 }}>\n          <motion.div\n            initial={{ opacity: 0, y: 100 }} // Increased y value for more motion\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1.2, ease: \"easeOut\" }} // Increased duration and added easing\n          >\n            <Typography\n              variant={isSmallScreen ? \"h3\" : \"h1\"}\n              component=\"h1\"\n              gutterBottom\n              sx={{\n                fontWeight: 700,\n                textShadow: \"2px 2px 4px rgba(0,0,0,0.5)\",\n                fontSize: isSmallScreen ? \"2rem\" : \"3.75rem\",\n              }}\n            >\n              Welcome to Our Store\n            </Typography>\n            <Typography\n              variant={isSmallScreen ? \"body1\" : \"h5\"}\n              paragraph\n              sx={{\n                textShadow: \"1px 1px 2px rgba(0,0,0,0.5)\",\n                fontSize: isSmallScreen ? \"1rem\" : \"1.5rem\",\n                mb: 3,\n              }}\n            >\n              Discover amazing products at unbeatable prices\n            </Typography>\n            <Button\n              variant=\"contained\"\n              size={isSmallScreen ? \"medium\" : \"large\"}\n              color=\"secondary\"\n              startIcon={<Search />}\n              onClick={handleExploreProductsClick}\n              sx={{\n                borderRadius: \"50px\",\n                padding: isSmallScreen ? \"8px 16px\" : \"12px 24px\",\n                fontSize: isSmallScreen ? \"0.875rem\" : \"1rem\",\n              }}\n            >\n              Shop Now\n            </Button>\n          </motion.div>\n        </Container>\n      </HeroSection>\n\n      <Container\n        maxWidth=\"lg\"\n        sx={{ py: isSmallScreen ? 4 : 8 }}\n        id=\"products\"\n        ref={productsSectionRef}\n      >\n        <Typography\n          variant={isSmallScreen ? \"h4\" : \"h2\"}\n          component=\"h2\"\n          gutterBottom\n          align=\"center\"\n          sx={{\n            fontWeight: 700,\n            mb: isSmallScreen ? 4 : 6,\n            fontSize: isSmallScreen ? \"1.75rem\" : \"3rem\",\n          }}\n        >\n          Our Products\n        </Typography>\n        {loading ? (\n          <Typography variant=\"h5\" align=\"center\">\n            Loading products...\n          </Typography>\n        ) : Object.keys(groupedProducts).length === 0 ? (\n          <Typography variant=\"h6\" align=\"center\">\n            No products found.\n          </Typography>\n        ) : (\n          Object.entries(groupedProducts).map(\n            ([categoryName, categoryProducts]) => (\n              <Box key={categoryName} sx={{ mb: isSmallScreen ? 4 : 6 }}>\n                <CategoryDivider textAlign=\"left\">\n                  <CategoryHeader>\n                    <CategoryTitle\n                      variant={isSmallScreen ? \"h5\" : \"h4\"}\n                      component=\"h3\"\n                    >\n                      {categoryName.charAt(0).toUpperCase() +\n                        categoryName.slice(1)}\n                      <Typography\n                        component=\"span\"\n                        color=\"text.secondary\"\n                        sx={{ ml: 1 }}\n                      >\n                        ({categoryProducts.length} items)\n                      </Typography>\n                    </CategoryTitle>\n                  </CategoryHeader>\n                </CategoryDivider>\n                {renderProductGrid(categoryProducts, categoryName)}\n              </Box>\n            )\n          )\n        )}\n      </Container>\n\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={3000}\n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity=\"success\"\n          sx={{\n            width: \"100%\",\n            borderRadius: \"16px\",\n            fontWeight: 500,\n          }}\n        >\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Login.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":97,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  Box,\n  Link,\n  Card,\n  CardContent,\n  InputAdornment,\n  IconButton,\n  Alert,\n  CircularProgress,\n  Backdrop,\n  useTheme,\n} from \"@mui/material\";\nimport { useAuth } from \"../firebase/Auth\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { styled } from \"@mui/material/styles\";\nimport EmailIcon from \"@mui/icons-material/Email\";\nimport LockIcon from \"@mui/icons-material/Lock\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\n\nconst GradientBackground = styled(Box)(({ theme }) => ({\n  minHeight: \"100vh\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,\n}));\n\nconst LoginCard = styled(Card)(({ theme }) => ({\n  minWidth: 300,\n  maxWidth: 400,\n  padding: theme.spacing(3),\n  backgroundColor: \"rgba(44, 44, 45, 0.9)\",\n  backdropFilter: \"blur(10px)\",\n  boxShadow: \"0 8px 32px 0 rgba(0, 0, 0, 0.37)\",\n  borderRadius: theme.shape.borderRadius,\n  color: theme.palette.text.primary,\n}));\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  marginBottom: theme.spacing(2),\n  background: `linear-gradient(45deg, ${theme.palette.primary.dark} 30%, ${theme.palette.secondary.dark} 90%)`,\n  border: 0,\n  borderRadius: 3,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  color: theme.palette.common.white,\n  height: 48,\n  padding: \"0 30px\",\n}));\n\nexport default function Login() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { signIn, error: authError } = useAuth();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const theme = useTheme();\n\n  // Get redirect path from location state, or default to home\n  const from = location.state?.from?.pathname || \"/\";\n\n  async function handleLogin(event) {\n    event.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const userWithRole = await signIn(email, password);\n      console.log(\"Sign in successful\", userWithRole);\n\n      if (userWithRole.role === \"admin\") {\n        navigate(\"/admin\", { replace: true });\n      } else {\n        navigate(from, { replace: true });\n      }\n    } catch (err) {\n      console.error(\"Login failed:\", err);\n      setError(err.message || \"Failed to login. Please check your credentials.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <GradientBackground>\n      <LoginCard>\n        <CardContent>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\n            Welcome Back\n          </Typography>\n          <Box component=\"form\" onSubmit={handleLogin} noValidate>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <EmailIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? \"text\" : \"password\"}\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LockIcon />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n            {(error || authError) && (\n              <Alert severity=\"error\" sx={{ mt: 2 }}>\n                {error || authError}\n              </Alert>\n            )}\n            <StyledButton\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={loading}\n            >\n              Sign In\n            </StyledButton>\n            <Box\n              sx={{ display: \"flex\", justifyContent: \"space-between\", mt: 2 }}\n            >\n              <Link\n                href=\"/forgot-password\"\n                variant=\"body2\"\n                color=\"primary\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  navigate(\"/forgot-password\");\n                }}\n              >\n                Forgot password?\n              </Link>\n              <Link href=\"/register\" variant=\"body2\" color=\"primary\">\n                Create an account\n              </Link>\n            </Box>\n          </Box>\n        </CardContent>\n      </LoginCard>\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={loading}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </GradientBackground>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Orders.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":111,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/Auth\";\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { useAuth } from \"../firebase/Auth\";\nimport {\n  Container,\n  Paper,\n  Typography,\n  Box,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Chip,\n  Grid,\n  Divider,\n  CircularProgress,\n} from \"@mui/material\";\nimport { ExpandMore } from \"@mui/icons-material\";\n\nconst OrderStatus = {\n  PENDING: \"pending\",\n  CONFIRMED: \"confirmed\",\n  SHIPPED: \"shipped\",\n  DELIVERED: \"delivered\",\n  CANCELLED: \"cancelled\",\n};\n\nconst statusColors = {\n  [OrderStatus.PENDING]: \"warning\",\n  [OrderStatus.CONFIRMED]: \"info\",\n  [OrderStatus.SHIPPED]: \"primary\",\n  [OrderStatus.DELIVERED]: \"success\",\n  [OrderStatus.CANCELLED]: \"error\",\n};\n\nconst CustomerOrders = () => {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      fetchOrders();\n    }\n  }, [user]);\n\n  const fetchOrders = async () => {\n    if (!user) return;\n\n    try {\n      const q = query(\n        collection(db, \"orders\"),\n        where(\"customerID\", \"==\", user.uid) // Ensure the field name matches the Firestore document\n      );\n\n      const querySnapshot = await getDocs(q);\n      const ordersData = querySnapshot.docs.map((doc) => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          orderDate: data.orderDate?.toDate(),\n        };\n      });\n\n      console.log(\"Fetched orders:\", ordersData); // Debugging statement\n\n      // Sort orders by date, newest first\n      setOrders(ordersData.sort((a, b) => b.orderDate - a.orderDate));\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to safely render address\n  const renderAddress = (address) => {\n    if (!address) return \"No address information available\";\n\n    const addressParts = [];\n    if (address.address1) addressParts.push(address.address1);\n    if (address.street) addressParts.push(address.street);\n    if (address.city || address.state || address.zip) {\n      const cityStateZip = [address.city, address.state, address.zip]\n        .filter(Boolean)\n        .join(\", \");\n      if (cityStateZip) addressParts.push(cityStateZip);\n    }\n    if (address.country) addressParts.push(address.country);\n\n    return addressParts.length > 0\n      ? addressParts.join(\"\\n\")\n      : \"Incomplete address information\";\n  };\n\n  // Helper function to calculate total price\n  const calculateTotal = (items) => {\n    if (!Array.isArray(items)) return 0;\n    return (\n      items.reduce((sum, item) => {\n        const price = item?.price || 0;\n        const quantity = item?.quantity || 0;\n        return sum + price * quantity;\n      }, 0) + 300\n    ); // Adding 300 for shipping\n  };\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"60vh\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        My Orders\n      </Typography>\n\n      {orders.length === 0 ? (\n        <Paper sx={{ p: 3, textAlign: \"center\" }}>\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            You haven't placed any orders yet.\n          </Typography>\n        </Paper>\n      ) : (\n        orders.map((order) => (\n          <Accordion key={order.id} sx={{ mb: 2 }}>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item xs={12} sm={4}>\n                  <Typography variant=\"subtitle1\">\n                    Order #{order.id.slice(-8)}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {order.orderDate?.toLocaleDateString() ||\n                      \"Date not available\"}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <Chip\n                    label={order.status || \"Processing\"}\n                    color={statusColors[order.status] || \"default\"}\n                    size=\"small\"\n                  />\n                </Grid>\n              </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Shipping Address\n                </Typography>\n                <Typography variant=\"body2\" style={{ whiteSpace: \"pre-line\" }}>\n                  {renderAddress(order.shippingAddress)}\n                </Typography>\n              </Box>\n\n              <Divider sx={{ my: 2 }} />\n\n              <Typography variant=\"h6\" gutterBottom>\n                Order Items\n              </Typography>\n              {Array.isArray(order.items) && order.items.length > 0 ? (\n                order.items.map((item, index) => (\n                  <Box key={index} sx={{ mb: 1 }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={6} sm={4}>\n                        <Typography>\n                          {item?.name || \"Product name not available\"}\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={3} sm={2}>\n                        <Typography>x{item?.quantity || 0}</Typography>\n                      </Grid>\n                      <Grid item xs={3} sm={2}>\n                        <Typography>\n                          {item?.size || \"Size not available\"}\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6} sm={4}>\n                        <Typography>\n                          PKR{\" \"}\n                          {((item?.price || 0) * (item?.quantity || 0)).toFixed(\n                            2\n                          )}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                ))\n              ) : (\n                <Typography color=\"text.secondary\">\n                  No items in this order\n                </Typography>\n              )}\n\n              <Divider sx={{ my: 2 }} />\n\n              <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                <Typography variant=\"h6\">\n                  Total: PKR {calculateTotal(order.items).toFixed(2)}\n                </Typography>\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        ))\n      )}\n    </Container>\n  );\n};\n\nexport default CustomerOrders;\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/ProductDetail.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":27,"column":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchProductById } from \"../feature/products-slice\";\nimport { addToCart } from \"../feature/cart-slice\";\nimport {\n  Container,\n  Grid,\n  Typography,\n  Button,\n  Box,\n  CircularProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  Snackbar,\n  Alert,\n  IconButton,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\nconst ColorSwatch = ({ color, selected, onClick }) => (\n  <Box\n    onClick={onClick}\n    sx={{\n      width: 24,\n      height: 24,\n      borderRadius: \"50%\",\n      backgroundColor: color,\n      border: selected ? \"2px solid #000\" : \"1px solid #ccc\",\n      marginRight: 1,\n      cursor: \"pointer\",\n    }}\n  />\n);\n\nconst SizeButton = ({ size, selected, onClick, disabled }) => (\n  <Button\n    variant={selected ? \"contained\" : \"outlined\"}\n    onClick={onClick}\n    disabled={disabled}\n    sx={{\n      minWidth: 40,\n      marginRight: 1,\n      opacity: disabled ? 0.5 : 1,\n      \"&.Mui-disabled\": {\n        backgroundColor: \"transparent\",\n      },\n    }}\n  >\n    {size}\n  </Button>\n);\n\nconst getProductDetails = (category) => {\n\n  const formattedCategory = category.toLowerCase().replace(/\\s+/g, \"_\");\n\n  const details = {\n    acid_wash: {\n      composition: [\n        \"Upper: 100% Premium Leather/Textile\",\n        \"Lining: 100% Textile\",\n        \"Sole: Rubber compound for maximum grip\",\n      ],\n      care: [\n        \"Clean with a soft, dry cloth\",\n        \"Store in a cool, dry place\",\n        \"Use shoe tree to maintain shape\",\n      ],\n      features: [\n        \"Cushioned insole for comfort\",\n        \"Breathable mesh lining\",\n        \"Durable outsole\",\n      ],\n    },\n    graphic_hoods: {\n      composition: [\n        \"Main fabric: 95% Cotton, 5% Elastane\",\n        \"Lining: 100% Cotton\",\n        \"Trim: 100% Polyester\",\n      ],\n      care: [\n        \"Machine wash at 30°C\",\n        \"Do not bleach\",\n        \"Iron at medium temperature\",\n        \"Dry clean possible\",\n      ],\n      features: [\n        \"Regular fit\",\n        \"Breathable fabric\",\n        \"Moisture-wicking technology\",\n      ],\n    },\n    totes: {\n      composition: [\n        \"Exterior: Premium quality material\",\n        \"Interior: Textile lining\",\n        \"Hardware: Metal components\",\n      ],\n      care: [\n        \"Wipe clean with damp cloth\",\n        \"Avoid direct sunlight\",\n        \"Store in provided dust bag\",\n      ],\n      features: [\n        \"Adjustable components\",\n        \"Multiple compartments\",\n        \"Durable construction\",\n      ],\n    },\n    thrifts: {\n      composition: [\n        \"Main fabric: 100% Vintage Cotton\",\n        \"Lining: 100% Organic Cotton\",\n        \"Trim: 100% Recycled Polyester\",\n      ],\n      care: [\n        \"Hand wash only\",\n        \"Do not tumble dry\",\n        \"Iron at low temperature\",\n      ],\n      features: [\n        \"Unique vintage design\",\n        \"Eco-friendly materials\",\n        \"Limited edition\",\n      ],\n    },\n  };\n\n  return (\n    details[formattedCategory] || {\n      composition: [],\n      care: [],\n      features: [],\n    }\n  );\n};\n\nexport default function ProductDetail() {\n  const { productId } = useParams();\n  const dispatch = useDispatch();\n  const { currentProduct, loading } = useSelector((state) => state.products);\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [sizeError, setSizeError] = useState(false);\n  const [imageTransitioning, setImageTransitioning] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchProductById(productId));\n  }, [dispatch, productId]);\n\n  useEffect(() => {\n    if (currentProduct) {\n      setSelectedColor(currentProduct.colors?.[0] || \"\");\n      setCurrentImageIndex(0);\n      setSizeError(false);\n      setSelectedSize(\"\");\n    }\n  }, [currentProduct]);\n\n  const handleAddToCart = () => {\n    if (!selectedSize) {\n      setSnackbarMessage(\"Please select a size before adding to cart\");\n      setSnackbarSeverity(\"error\");\n      setSnackbarOpen(true);\n      setSizeError(true);\n      return;\n    }\n\n    if (currentProduct) {\n      dispatch(\n        addToCart({\n          product: currentProduct,\n          quantity: 1,\n          color: selectedColor,\n          size: selectedSize,\n        })\n      );\n      setSnackbarMessage(`${currentProduct.name} added to cart`);\n      setSnackbarSeverity(\"success\");\n      setSnackbarOpen(true);\n      setSizeError(false);\n    }\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handlePrevImage = () => {\n    setImageTransitioning(true);\n    setTimeout(() => {\n      setCurrentImageIndex((prev) =>\n        prev === 0 ? currentProduct.imageUrl.length - 1 : prev - 1\n      );\n      setImageTransitioning(false);\n    }, 300);\n  };\n\n  const handleNextImage = () => {\n    setImageTransitioning(true);\n    setTimeout(() => {\n      setCurrentImageIndex((prev) =>\n        prev === currentProduct.imageUrl.length - 1 ? 0 : prev + 1\n      );\n      setImageTransitioning(false);\n    }, 300);\n  };\n\n  if (loading) {\n    return (\n      <Container sx={{ py: 8, display: \"flex\", justifyContent: \"center\" }}>\n        <CircularProgress />\n      </Container>\n    );\n  }\n\n  if (!currentProduct) {\n    return <Typography variant=\"h5\">Product not found</Typography>;\n  }\n\n  const {\n    name,\n    price,\n    description,\n    imageUrl = [],\n    colors = [],\n    size = [],\n    gender,\n    fit,\n    category,\n  } = currentProduct || {};\n\n  const productDetails = getProductDetails(category);\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 8 }}>\n      <Grid container spacing={4}>\n        <Grid item xs={12} md={6}>\n          <Box sx={{ position: \"relative\", overflow: \"hidden\" }}>\n            {imageUrl.length > 0 && (\n              <>\n                <img\n                  src={imageUrl[currentImageIndex]}\n                  alt={`${name} - View ${currentImageIndex + 1}`}\n                  style={{\n                    width: \"100%\",\n                    height: \"auto\",\n                    opacity: imageTransitioning ? 0 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                  }}\n                />\n                {imageUrl.length > 1 && (\n                  <>\n                    <IconButton\n                      onClick={handlePrevImage}\n                      sx={{\n                        position: \"absolute\",\n                        left: 8,\n                        top: \"50%\",\n                        transform: \"translateY(-50%)\",\n                        bgcolor: \"rgba(255, 255, 255, 0.8)\",\n                        \"&:hover\": { bgcolor: \"rgba(255, 255, 255, 0.9)\" },\n                      }}\n                    >\n                      <ChevronLeft />\n                    </IconButton>\n                    <IconButton\n                      onClick={handleNextImage}\n                      sx={{\n                        position: \"absolute\",\n                        right: 8,\n                        top: \"50%\",\n                        transform: \"translateY(-50%)\",\n                        bgcolor: \"rgba(255, 255, 255, 0.8)\",\n                        \"&:hover\": { bgcolor: \"rgba(255, 255, 255, 0.9)\" },\n                      }}\n                    >\n                      <ChevronRight />\n                    </IconButton>\n                  </>\n                )}\n              </>\n            )}\n          </Box>\n          {imageUrl.length > 1 && (\n            <Box\n              sx={{ display: \"flex\", gap: 1, mt: 2, overflowX: \"auto\", py: 1 }}\n            >\n              {imageUrl.map((url, index) => (\n                <Box\n                  key={index}\n                  onClick={() => {\n                    setImageTransitioning(true);\n                    setTimeout(() => {\n                      setCurrentImageIndex(index);\n                      setImageTransitioning(false);\n                    }, 300);\n                  }}\n                  sx={{\n                    width: 60,\n                    height: 60,\n                    flexShrink: 0,\n                    cursor: \"pointer\",\n                    border:\n                      currentImageIndex === index\n                        ? \"2px solid #1976d2\"\n                        : \"1px solid #ddd\",\n                    \"&:hover\": { opacity: 0.8 },\n                    transition: \"border-color 0.3s ease\",\n                  }}\n                >\n                  <img\n                    src={url}\n                    alt={`Thumbnail ${index + 1}`}\n                    style={{\n                      width: \"100%\",\n                      height: \"100%\",\n                      objectFit: \"cover\",\n                    }}\n                  />\n                </Box>\n              ))}\n            </Box>\n          )}\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Typography variant=\"h4\" gutterBottom>\n            {name || \"Untitled Product\"}\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"text.secondary\" gutterBottom>\n            SKU: {productId}\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            gutterBottom\n            sx={{ fontWeight: \"bold\", my: 2 }}\n          >\n            PKR {(price || 0).toFixed(2)}\n          </Typography>\n          <Typography variant=\"body1\" paragraph>\n            {description || \"No description available\"}\n          </Typography>\n\n          {fit && (\n            <Box sx={{ my: 3 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                FIT\n              </Typography>\n              <Typography variant=\"body1\">{fit}</Typography>\n            </Box>\n          )}\n\n          {colors.length > 0 && (\n            <Box sx={{ my: 3 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                COLORS\n              </Typography>\n              <Box display=\"flex\">\n                {colors.map((color) => (\n                  <ColorSwatch\n                    key={color}\n                    color={color}\n                    selected={color === selectedColor}\n                    onClick={() => setSelectedColor(color)}\n                  />\n                ))}\n              </Box>\n            </Box>\n          )}\n\n          {size.length > 0 && (\n            <Box sx={{ my: 3 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                SIZE\n                {sizeError && (\n                  <span style={{ color: \"red\", marginLeft: \"8px\" }}>\n                    *Required\n                  </span>\n                )}\n              </Typography>\n              <Box display=\"flex\">\n                {size.map((size) => (\n                  <SizeButton\n                    key={size}\n                    size={size}\n                    selected={size === selectedSize}\n                    onClick={() => {\n                      setSelectedSize(size);\n                      setSizeError(false);\n                    }}\n                  />\n                ))}\n              </Box>\n            </Box>\n          )}\n\n          {gender && (\n            <Box sx={{ my: 3 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                GENDER\n              </Typography>\n              <RadioGroup\n                row\n                value={gender}\n                onChange={(e) => console.log(e.target.value)}\n              >\n                <FormControlLabel value=\"MEN\" control={<Radio />} label=\"Men\" />\n                <FormControlLabel\n                  value=\"WOMEN\"\n                  control={<Radio />}\n                  label=\"Women\"\n                />\n              </RadioGroup>\n            </Box>\n          )}\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            size=\"large\"\n            onClick={handleAddToCart}\n            sx={{ my: 3 }}\n          >\n            Add To Cart\n          </Button>\n\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography>PRODUCT DETAILS & COMPOSITION</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box sx={{ mb: 2 }}>\n                <Typography\n                  variant=\"subtitle2\"\n                  sx={{ mb: 1, fontWeight: \"bold\" }}\n                >\n                  Composition\n                </Typography>\n                <ul style={{ marginLeft: \"20px\", marginBottom: \"16px\" }}>\n                  {productDetails.composition.map((item, index) => (\n                    <li key={index}>\n                      <Typography variant=\"body2\">{item}</Typography>\n                    </li>\n                  ))}\n                </ul>\n\n                <Typography\n                  variant=\"subtitle2\"\n                  sx={{ mb: 1, fontWeight: \"bold\" }}\n                >\n                  Features\n                </Typography>\n                <ul style={{ marginLeft: \"20px\", marginBottom: \"16px\" }}>\n                  {productDetails.features.map((item, index) => (\n                    <li key={index}>\n                      <Typography variant=\"body2\">{item}</Typography>\n                    </li>\n                  ))}\n                </ul>\n\n                <Typography\n                  variant=\"subtitle2\"\n                  sx={{ mb: 1, fontWeight: \"bold\" }}\n                >\n                  Care Instructions\n                </Typography>\n                <ul style={{ marginLeft: \"20px\" }}>\n                  {productDetails.care.map((item, index) => (\n                    <li key={index}>\n                      <Typography variant=\"body2\">{item}</Typography>\n                    </li>\n                  ))}\n                </ul>\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography>DELIVERIES & RETURNS</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                {/* Add delivery and return information here */}\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography>SPECIAL RETURN CONDITIONS*</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                {/* Add special return conditions here */}\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n      </Grid>\n\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={3000}\n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        sx={{\n          \"& .MuiPaper-root\": {\n            borderRadius: \"16px\",\n            fontFamily: \"Arial, sans-serif\",\n          },\n        }}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity={snackbarSeverity}\n          sx={{ width: \"100%\" }}\n        >\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/pages/Register.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":127,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  Box,\n  Link,\n  Card,\n  CardContent,\n  InputAdornment,\n  IconButton,\n  Alert,\n  AlertTitle,\n  Grid,\n  CircularProgress,\n  Backdrop,\n  useTheme,\n} from \"@mui/material\";\nimport { useAuth } from \"../firebase/Auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { styled } from \"@mui/material/styles\";\nimport EmailIcon from \"@mui/icons-material/Email\";\nimport LockIcon from \"@mui/icons-material/Lock\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\n\n// Your existing styled components remain the same\nconst GradientBackground = styled(Box)(({ theme }) => ({\n  minHeight: \"100vh\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,\n  padding: theme.spacing(2),\n}));\n\nconst RegisterCard = styled(Card)(({ theme }) => ({\n  width: \"100%\",\n  maxWidth: 400,\n  padding: theme.spacing(3),\n  backgroundColor: \"rgba(44, 44, 45, 0.9)\",\n  backdropFilter: \"blur(10px)\",\n  boxShadow: \"0 8px 32px 0 rgba(0, 0, 0, 0.37)\",\n  borderRadius: theme.shape.borderRadius,\n  color: theme.palette.text.primary,\n}));\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  marginBottom: theme.spacing(2),\n  background: `linear-gradient(45deg, ${theme.palette.primary.dark} 30%, ${theme.palette.secondary.dark} 90%)`,\n  border: 0,\n  borderRadius: 3,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  color: theme.palette.common.white,\n  height: 48,\n  padding: \"0 30px\",\n}));\n\nexport default function Register() {\n  const { signUp, verificationEmailSent } = useAuth();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [registrationComplete, setRegistrationComplete] = useState(false);\n  const theme = useTheme();\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n    if (errors[name]) {\n      setErrors((prev) => ({\n        ...prev,\n        [name]: \"\",\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name.trim()) newErrors.name = \"Name is required\";\n    if (!formData.email.trim()) newErrors.email = \"Email is required\";\n    if (!formData.password) newErrors.password = \"Password is required\";\n    if (formData.password.length < 6)\n      newErrors.password = \"Password must be at least 6 characters\";\n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = \"Passwords do not match\";\n    }\n    return newErrors;\n  };\n\n  async function handleRegister(event) {\n    event.preventDefault();\n    const formErrors = validateForm();\n\n    if (Object.keys(formErrors).length > 0) {\n      setErrors(formErrors);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await signUp(formData.email, formData.password, formData.name);\n      setRegistrationComplete(true);\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      setErrors({ submit: error.message });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (registrationComplete) {\n    return (\n      <GradientBackground>\n        <RegisterCard>\n          <CardContent>\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\n              <AlertTitle>Registration Successful!</AlertTitle>\n              We've sent a verification email to {formData.email}. Please check your\n              inbox and verify your email address to complete the registration\n              process.\n            </Alert>\n            <Typography variant=\"body2\" sx={{ mb: 2 }}>\n              Once you've verified your email, you can proceed to login.\n            </Typography>\n            <StyledButton\n              fullWidth\n              variant=\"contained\"\n              onClick={() => navigate(\"/login\")}\n            >\n              Go to Login\n            </StyledButton>\n          </CardContent>\n        </RegisterCard>\n      </GradientBackground>\n    );\n  }\n\n  return (\n    <GradientBackground>\n      <RegisterCard>\n        <CardContent>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\n            Create Account\n          </Typography>\n          <Box component=\"form\" onSubmit={handleRegister} noValidate>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"Full Name\"\n              name=\"name\"\n              autoComplete=\"name\"\n              autoFocus\n              value={formData.name}\n              onChange={handleChange}\n              error={!!errors.name}\n              helperText={errors.name}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <PersonIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              error={!!errors.email}\n              helperText={errors.email}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <EmailIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? \"text\" : \"password\"}\n              id=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              error={!!errors.password}\n              helperText={errors.password}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LockIcon />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"confirmPassword\"\n              label=\"Confirm Password\"\n              type={showConfirmPassword ? \"text\" : \"password\"}\n              id=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              error={!!errors.confirmPassword}\n              helperText={errors.confirmPassword}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LockIcon />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle confirm password visibility\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      edge=\"end\"\n                    >\n                      {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n            {errors.submit && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\n                {errors.submit}\n              </Typography>\n            )}\n            <StyledButton\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={loading}\n            >\n              Sign Up\n            </StyledButton>\n            <Box sx={{ textAlign: \"center\" }}>\n              <Link href=\"/login\" variant=\"body2\" color=\"primary\">\n                Already have an account? Sign In\n              </Link>\n            </Box>\n          </Box>\n        </CardContent>\n      </RegisterCard>\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={loading}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </GradientBackground>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ahmad/Downloads/APP/src/utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]